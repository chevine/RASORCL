-- Generated by Oracle SQL Developer Data Modeler 19.4.0.350.1424
--   at:        2020-11-14 13:19:22 EST
--   site:      Oracle Database 12cR2
--   type:      Oracle Database 12cR2



CREATE ROLE ras_read_write NOT IDENTIFIED;

CREATE ROLE ras_stg_read_only NOT IDENTIFIED;

CREATE ROLE soda_app NOT IDENTIFIED;

CREATE USER ras IDENTIFIED BY account UNLOCK 
;

GRANT RAS_STG_READ_ONLY TO RAS 
;

GRANT CONNECT,RESOURCE TO RAS  WITH ADMIN OPTION
;

GRANT CREATE LIBRARY, CREATE SESSION, DEBUG ANY PROCEDURE, DEBUG CONNECT SESSION, CREATE OPERATOR, CREATE TYPE, CREATE PROFILE, CREATE PROCEDURE, CREATE PUBLIC SYNONYM, CREATE EXTERNAL JOB, CREATE INDEXTYPE, CREATE ROLE, CREATE CUBE, CREATE CUBE DIMENSION, CREATE DIMENSION, CREATE TRIGGER, CREATE SEQUENCE, CREATE VIEW, CREATE SYNONYM, CREATE MATERIALIZED VIEW, CREATE TABLE, CREATE JOB, CREATE RULE SET, CREATE hierarchy,
    CREATE CUBE BUILD PROCESS,
    CREATE RULE
TO ras WITH ADMIN OPTION;

CREATE user ras_stg identified by account unlock 
;

CREATE SEQUENCE ras.audit_status_seq INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCACHE ORDER;

CREATE SEQUENCE ras.category_id_seq INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCACHE ORDER;

CREATE SEQUENCE ras.name_id_seq INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCACHE ORDER;

CREATE SEQUENCE ras.property_id_seq INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCACHE ORDER;

CREATE SEQUENCE ras.property_type_seq INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCACHE ORDER;

CREATE SEQUENCE ras.ps_txn_seq INCREMENT BY 50 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;

CREATE SEQUENCE ras.rasa_audit_id_seq INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCACHE ORDER;

CREATE SEQUENCE ras.relationship_id_seq INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCACHE ORDER;

CREATE SEQUENCE ras.report_id_seq INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCACHE ORDER;

CREATE OR REPLACE FUNCTION ras.extract_address_part (
    full_address  IN  VARCHAR2,
    address_part  IN  VARCHAR2 DEFAULT 'STREET'
) RETURN VARCHAR2 AS
    extracted_street_part VARCHAR2(255);
BEGIN
-- The function assumes that the name of the street/road/avenue
-- is preceded by a number.
    IF address_part = 'STREET' THEN
        SELECT
            regexp_replace(TRIM(full_address), '([0-9]+[-]?[0-9]*)([ ]+)', '')
        INTO extracted_street_part
        FROM
            dual;

    ELSE
        IF address_part = 'NUMBER' THEN
            SELECT
                substr(TRIM(full_address), 1, instr(TRIM(full_address), ' '))
            INTO extracted_street_part
            FROM
                dual;

        ELSE
            SELECT
                full_address
            INTO extracted_street_part
            FROM
                dual;

        END IF;
    END IF;

    RETURN extracted_street_part;
END extract_address_part;
/

CREATE OR REPLACE FUNCTION ras.extract_name_part (
    full_name  IN  VARCHAR2,
    name_part  IN  VARCHAR2 DEFAULT 'LAST'
) RETURN VARCHAR2 AS
    extracted_name_part VARCHAR2(255);
BEGIN
    IF name_part = 'LAST' THEN
        SELECT
            TRIM(regexp_replace(TRIM(full_name), '([A-Za-z]+)([,])([-A-Z &%]+)', '\1'))
        INTO extracted_name_part
        FROM
            dual;

    ELSE
        IF name_part = 'FIRST' THEN
            SELECT
                TRIM(regexp_replace(TRIM(full_name), '([A-Za-z]+)([,])([-A-Z &%]+)', '\3'))
            INTO extracted_name_part
            FROM
                dual;

        ELSE
            IF name_part = 'MIDDLE' THEN
                SELECT
                    ' '
                INTO extracted_name_part
                FROM
                    dual;

            ELSE
                SELECT
                    full_name
                INTO extracted_name_part
                FROM
                    dual;

            END IF;
        END IF;
    END IF;

    RETURN extracted_name_part;
END extract_name_part;
/

CREATE OR REPLACE FUNCTION ras.extract_street_address (
    full_address IN VARCHAR2
) RETURN VARCHAR2 AS
    extracted_street_part VARCHAR2(255);
BEGIN
-- The function assumes that the name of the street/road/avenue
-- is preceded by a number.
    SELECT
        regexp_replace(TRIM(full_address), '([0-9]+[-]?[0-9]*)([ ]+)', '')
    INTO extracted_street_part
    FROM
        dual;

    RETURN extracted_street_part;
END extract_street_address;
/

CREATE OR REPLACE FUNCTION ras.generate_number (
    number_width IN NUMBER DEFAULT 9
) RETURN NUMBER AS
    random_number NUMBER;
BEGIN
    --DBMS_RANDOM.seed (val => 10000);
    SELECT
        trunc(dbms_random.value(100000000, 999999999))
    INTO random_number
    FROM
        dual;

    RETURN random_number;
END generate_number;
/

CREATE OR REPLACE FUNCTION ras.landlord_property_income (
    household_count IN NUMBER DEFAULT 1
) RETURN NUMBER AS
    income NUMBER;
BEGIN
    SELECT
        trunc(dbms_random.value(1200, 2500), - 2) * 12 * household_count
    INTO income
    FROM
        dual;

    RETURN income;
END landlord_property_income;
/

CREATE OR REPLACE FUNCTION ras.sgtech_contains_arcs (
    geometry sdo_geometry
) RETURN VARCHAR2
    PARALLEL_ENABLE
AS
    i              NUMBER := 3;
    contains_arcs  VARCHAR2(10) := 'FALSE';
BEGIN
    IF geometry.sdo_elem_info IS NOT NULL THEN
        IF geometry.sdo_elem_info.count >= 3 THEN
            WHILE i <= geometry.sdo_elem_info.count LOOP
                IF
                    geometry.sdo_elem_info(i - 1) IN (
                        2,
                        1003,
                        2003
                    ) AND geometry.sdo_elem_info(i) = 2
                THEN
                    contains_arcs := 'TRUE';
                    i := geometry.sdo_elem_info.count + 1;
                ELSE
                    i := i + 3;
                END IF;
            END LOOP;

        END IF;
    END IF;

    RETURN contains_arcs;
END;
/

CREATE TABLE ras.ras_audit_violation (
    tax_year     CHAR(4 BYTE) NOT NULL,
    property_id  NUMBER(18) NOT NULL,
    audit_id     NUMBER(5) NOT NULL,
    status_id    NUMBER(2) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE INDEX ras.ras_audit_violation_id_year_propid_idx ON
    ras.ras_audit_violation (
        audit_id
    ASC,
        tax_year
    ASC,
        property_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX ras.rav_taxyear_propid_auditid_pk ON
    ras.ras_audit_violation (
        tax_year
    ASC,
        property_id
    ASC,
        audit_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_audit_violation
    ADD CONSTRAINT rav_taxyear_propid_auditid_pk PRIMARY KEY ( tax_year,
                                                               property_id,
                                                               audit_id )
        USING INDEX ras.rav_taxyear_propid_auditid_pk;

CREATE TABLE ras.ras_property_type (
    property_type         NUMBER(3) DEFAULT ras.property_type_seq.nextval NOT NULL,
    property_class        CHAR(3 BYTE),
    property_description  VARCHAR2(200 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_propertytype ON
    ras.ras_property_type (
        property_type
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_property_type
    ADD CONSTRAINT pk_propertytype PRIMARY KEY ( property_type )
        USING INDEX ras.pk_propertytype;

CREATE TABLE ras.ras_property_description (
    property_id           NUMBER(18) DEFAULT ras.property_id_seq.nextval NOT NULL,
    state                 CHAR(2 BYTE) NOT NULL,
    municipality_code     CHAR(4 BYTE),
    property_type         NUMBER(*, 0) NOT NULL,
    is_rental_property    CHAR(1 BYTE) NOT NULL,
    property_country      CHAR(2 BYTE) NOT NULL,
    property_city         VARCHAR2(50 BYTE) NOT NULL,
    property_location     VARCHAR2(100 BYTE) NOT NULL,
    owner_name            VARCHAR2(200 BYTE),
    owner_city            VARCHAR2(50 BYTE),
    owner_state           VARCHAR2(3 BYTE),
    owner_address         VARCHAR2(50 BYTE),
    owner_zipcode         CHAR(10 BYTE),
    owner_country         CHAR(2 BYTE),
    city_state_original   VARCHAR2(100 BYTE),
    tax_account_number    VARCHAR2(50 BYTE),
    property_class        VARCHAR2(50 BYTE) NOT NULL,
    number_of_apartments  NUMBER(*, 0),
    block                 CHAR(9 BYTE) NOT NULL,
    lot                   CHAR(9 BYTE) NOT NULL,
    census_tract          CHAR(5 BYTE) NOT NULL,
    census_block          CHAR(4 BYTE) NOT NULL,
    year_constructed      CHAR(4 BYTE),
    deed_book             CHAR(5 BYTE),
    deed_page             CHAR(5 BYTE),
    deed_date             CHAR(10 BYTE),
    load_tax_year         CHAR(4 BYTE),
    longitude             NUMBER,
    latitude              NUMBER
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY
    ENABLE ROW MOVEMENT;

CREATE INDEX ras.city_addr_idx ON
    ras.ras_property_description (
        owner_city
    ASC,
        owner_address
    ASC,
        owner_state
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE INDEX ras.city_state_original_idx ON
    ras.ras_property_description (
        city_state_original
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE INDEX ras.owner_address_idx ON
    ras.ras_property_description (
        owner_state
    ASC,
        owner_city
    ASC,
        owner_address
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE INDEX ras.owner_name_city_address_idx ON
    ras.ras_property_description (
        owner_name
    ASC,
        owner_address
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX ras.property_id_unq ON
    ras.ras_property_description (
        property_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE INDEX ras.state_municipality_code_idx ON
    ras.ras_property_description (
        state
    ASC,
        municipality_code
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE INDEX ras.tax_year_owner_name_address_idx ON
    ras.ras_property_description (
        load_tax_year
    ASC,
        owner_name
    ASC,
        owner_address
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

GRANT DELETE, INSERT, SELECT, UPDATE ON ras.ras_property_description TO ras_read_write;

ALTER TABLE ras.ras_property_description
    ADD CONSTRAINT pk_propertydescription PRIMARY KEY ( property_id )
        USING INDEX ras.property_id_unq;

CREATE TABLE ras.ras_audit (
    audit_id          NUMBER(5) DEFAULT "RAS"."RASA_AUDIT_ID_SEQ"."NEXTVAL" NOT NULL,
    audit_name        VARCHAR2(30 BYTE) NOT NULL,
    description       VARCHAR2(255 BYTE) NOT NULL,
    violation_points  NUMBER(*, 0) NOT NULL,
    default_status    CHAR(25 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.default_status_audit_id_idx ON
    ras.ras_audit (
        default_status
    ASC,
        audit_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX ras.rasa_audit_id_pk ON
    ras.ras_audit (
        audit_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_audit
    ADD CONSTRAINT rasa_audit_id_pk PRIMARY KEY ( audit_id )
        USING INDEX ras.rasa_audit_id_pk;

CREATE TABLE ras.ras_audit_status (
    status_id     NUMBER(*, 0) NOT NULL,
    audit_status  CHAR(25 BYTE) NOT NULL,
    description   VARCHAR2(255 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.audit_status_idx ON
    ras.ras_audit_status (
        audit_status
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX ras.ras_audit_status_pk ON
    ras.ras_audit_status (
        status_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_audit_status
    ADD CONSTRAINT ras_audit_status_pk PRIMARY KEY ( status_id )
        USING INDEX ras.ras_audit_status_pk;

CREATE OR REPLACE PROCEDURE RAS.AUDIT_ADDRESS_MISMATCH AS 
BEGIN
--------------------------------------------------------------------------------
-- The owner does not live in the same city as the property.
-- AUDIT_NAME: OWNER_PROPERTY_CITY_MISMATCH
INSERT INTO RAS.RAS_AUDIT_VIOLATION (TAX_YEAR, PROPERTY_ID, AUDIT_ID, STATUS_ID)
SELECT rpd.LOAD_TAX_YEAR
, rpd.PROPERTY_ID
, ra.AUDIT_ID
, rastat.STATUS_ID
FROM RAS.RAS_PROPERTY_TYPE rpt
JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_TYPE = rpt.PROPERTY_TYPE)
JOIN RAS.RAS_AUDIT ra ON (ra.AUDIT_NAME = 'OWNER_PROPERTY_CITY_MISMATCH')
JOIN RAS.RAS_AUDIT_STATUS rastat ON (rastat.AUDIT_STATUS = ra.DEFAULT_STATUS)
LEFT JOIN RAS.RAS_AUDIT_VIOLATION rav ON (rav.TAX_YEAR = rpd.LOAD_TAX_YEAR AND rav.PROPERTY_ID = rpd.PROPERTY_ID AND rav.AUDIT_ID = ra.AUDIT_ID)
WHERE rpt.PROPERTY_CLASS IN ('2', '4A', '4C')
--AND rpd.PROPERTY_CITY = 'PLAINFIELD CITY'
AND SUBSTR(TRIM(rpd.PROPERTY_CITY),1,REGEXP_INSTR(TRIM(rpd.PROPERTY_CITY),'[, ]')-1) != SUBSTR(TRIM(rpd.OWNER_CITY),1,REGEXP_INSTR(TRIM(rpd.OWNER_CITY),'[, ]')-1)
AND rav.TAX_YEAR IS NULL
FETCH NEXT 50000 ROWS ONLY;




--------------------------------------------------------------------------------
-- The owner lives in the same city as the property and the address is different.
-- AUDIT_NAME: OWNER_RESIDES_AT_DIFF_PROPERTY

INSERT INTO RAS.RAS_AUDIT_VIOLATION (TAX_YEAR, PROPERTY_ID, AUDIT_ID, STATUS_ID)
SELECT rpd.LOAD_TAX_YEAR
, rpd.PROPERTY_ID
, ra.AUDIT_ID
, rastat.STATUS_ID
FROM RAS.RAS_PROPERTY_TYPE rpt
JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_TYPE = rpt.PROPERTY_TYPE)
JOIN RAS.RAS_AUDIT ra ON (ra.AUDIT_NAME = 'OWNER_RESIDES_AT_DIFF_PROPERTY')
JOIN RAS.RAS_AUDIT_STATUS rastat ON (rastat.AUDIT_STATUS = ra.DEFAULT_STATUS)
LEFT JOIN RAS.RAS_AUDIT_VIOLATION rav ON (rav.TAX_YEAR = rpd.LOAD_TAX_YEAR AND rav.PROPERTY_ID = rpd.PROPERTY_ID AND rav.AUDIT_ID = ra.AUDIT_ID)
WHERE rpt.PROPERTY_CLASS IN ('2', '4A', '4C')
AND REGEXP_INSTR(UPPER(rpd.OWNER_ADDRESS),'BOX') <= 0
AND SUBSTR(TRIM(rpd.PROPERTY_CITY),1,REGEXP_INSTR(TRIM(rpd.PROPERTY_CITY),'[, ]')-1) = SUBSTR(TRIM(rpd.OWNER_CITY),1,REGEXP_INSTR(TRIM(rpd.OWNER_CITY),'[, ]')-1)
AND REGEXP_REPLACE(TRIM(rpd.PROPERTY_LOCATION),'([-0-9])+','') != REGEXP_REPLACE(TRIM(rpd.OWNER_ADDRESS),'([-0-9])+','')
--AND rpd.PROPERTY_CITY = 'PLAINFIELD CITY'
AND rav.TAX_YEAR IS NULL
FETCH NEXT 50000 ROWS ONLY;
--------------------------------------------------------------------------------
-- The owner address has provided a post office box as the owner's mailing address.
-- AUDIT_NAME: OWNER_PROVIDED_PO_BOX
INSERT INTO RAS.RAS_AUDIT_VIOLATION (TAX_YEAR, PROPERTY_ID, AUDIT_ID, STATUS_ID)
SELECT rpd.LOAD_TAX_YEAR
, rpd.PROPERTY_ID
, ra.AUDIT_ID
, rastat.STATUS_ID
FROM RAS.RAS_PROPERTY_TYPE rpt
JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_TYPE = rpt.PROPERTY_TYPE)
JOIN RAS.RAS_AUDIT ra ON (ra.AUDIT_NAME = 'OWNER_PROVIDED_PO_BOX')
JOIN RAS.RAS_AUDIT_STATUS rastat ON (rastat.AUDIT_STATUS = ra.DEFAULT_STATUS)
LEFT JOIN RAS.RAS_AUDIT_VIOLATION rav ON (rav.TAX_YEAR = rpd.LOAD_TAX_YEAR AND rav.PROPERTY_ID = rpd.PROPERTY_ID AND rav.AUDIT_ID = ra.AUDIT_ID)
WHERE rpt.PROPERTY_CLASS IN ('2', '4A', '4C')
--AND rpd.PROPERTY_CITY = 'PLAINFIELD CITY'
AND REGEXP_INSTR(UPPER(rpd.OWNER_ADDRESS),'BOX( )+[0-9]') >= 1
AND rav.TAX_YEAR IS NULL
FETCH NEXT 50000 ROWS ONLY;

--------------------------------------------------------------------------------
-- The property has at least two house numbers associated to it.
-- AUDIT_NAME: TWO_HOUSE_NUMBERS
INSERT INTO RAS.RAS_AUDIT_VIOLATION (TAX_YEAR, PROPERTY_ID, AUDIT_ID, STATUS_ID)
SELECT rpd.LOAD_TAX_YEAR
, rpd.PROPERTY_ID
, ra.AUDIT_ID
, rastat.STATUS_ID
FROM RAS.RAS_PROPERTY_TYPE rpt
JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_TYPE = rpt.PROPERTY_TYPE)
JOIN RAS.RAS_AUDIT ra ON (ra.AUDIT_NAME = 'TWO_HOUSE_NUMBERS')
JOIN RAS.RAS_AUDIT_STATUS rastat ON (rastat.AUDIT_STATUS = ra.DEFAULT_STATUS)
LEFT JOIN RAS.RAS_AUDIT_VIOLATION rav ON (rav.TAX_YEAR = rpd.LOAD_TAX_YEAR AND rav.PROPERTY_ID = rpd.PROPERTY_ID AND rav.AUDIT_ID = ra.AUDIT_ID)
WHERE rpt.PROPERTY_CLASS IN ('2', '4A', '4C')
--AND rpd.PROPERTY_CITY = 'PLAINFIELD CITY'
AND REGEXP_INSTR(TRIM(rpd.PROPERTY_LOCATION), '([0-9 ])+([-]+)([0-9 ])+') >= 1
AND rav.TAX_YEAR IS NULL
FETCH NEXT 50000 ROWS ONLY;
--------------------------------------------------------------------------------
-- The property is owned by a LLC entity.
INSERT INTO RAS.RAS_AUDIT_VIOLATION (TAX_YEAR, PROPERTY_ID, AUDIT_ID, STATUS_ID)
SELECT rpd.LOAD_TAX_YEAR
, rpd.PROPERTY_ID
, ra.AUDIT_ID
, rastat.STATUS_ID
FROM RAS.RAS_PROPERTY_TYPE rpt
JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_TYPE = rpt.PROPERTY_TYPE)
JOIN RAS.RAS_AUDIT ra ON (ra.AUDIT_NAME = 'OWNED_BY_LLC')
JOIN RAS.RAS_AUDIT_STATUS rastat ON (rastat.AUDIT_STATUS = ra.DEFAULT_STATUS)
LEFT JOIN RAS.RAS_AUDIT_VIOLATION rav ON (rav.TAX_YEAR = rpd.LOAD_TAX_YEAR AND rav.PROPERTY_ID = rpd.PROPERTY_ID AND rav.AUDIT_ID = ra.AUDIT_ID)
WHERE rpt.PROPERTY_CLASS IN ('2', '4A', '4C')
--AND rpd.PROPERTY_CITY = 'PLAINFIELD CITY'
AND REGEXP_INSTR(rpd.OWNER_NAME,'([ ,.]+)LLC') >= 1
AND rav.TAX_YEAR IS NULL
FETCH NEXT 50000 ROWS ONLY;



--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

END AUDIT_ADDRESS_MISMATCH;
/

CREATE TABLE ras.ras_property (
    tax_year                   CHAR(4 BYTE) NOT NULL,
    landlord_tax_id            CHAR(10 BYTE) NOT NULL,
    property_id                NUMBER(18) NOT NULL,
    percentage_owned           NUMBER(*, 0),
    rental_income_received     NUMBER(18),
    number_of_property_owners  NUMBER(*, 0),
    total_deductions           NUMBER(18),
    property_taxes             NUMBER(18),
    state                      CHAR(2 BYTE),
    municipality_code          CHAR(4 BYTE)
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_ras_property ON
    ras.ras_property (
        tax_year
    ASC,
        landlord_tax_id
    ASC,
        property_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX ras.property_id_idx ON
    ras.ras_property (
        property_id
    ASC,
        tax_year
    ASC,
        landlord_tax_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE INDEX ras.ras_property_state_municipality_idx ON
    ras.ras_property (
        state
    ASC,
        municipality_code
    ASC,
        tax_year
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_property
    ADD CONSTRAINT pk_ras_property PRIMARY KEY ( tax_year,
                                                 landlord_tax_id,
                                                 property_id )
        USING INDEX ras.pk_ras_property;

CREATE OR REPLACE PROCEDURE RAS.GENERATE_LANDLORD_RENTAL_PROPERTY_INCOME 
(
  HOUSEHOLD_COUNT IN NUMBER DEFAULT 1 
) AS 
BEGIN
    UPDATE RAS.RAS_PROPERTY
    SET RENTAL_INCOME_RECEIVED = landlord_property_income()
    WHERE RENTAL_INCOME_RECEIVED = 0;
    
END GENERATE_LANDLORD_RENTAL_PROPERTY_INCOME;
/

CREATE TABLE ras.ras_individual_filer (
    tax_year                CHAR(4 BYTE) NOT NULL,
    taxid                   CHAR(10 BYTE) NOT NULL,
    property_id             NUMBER(18),
    first_name              VARCHAR2(50 BYTE) NOT NULL,
    middle_name             VARCHAR2(50 BYTE),
    last_name               VARCHAR2(50 BYTE) NOT NULL,
    own_rental_property     CHAR(1 BYTE) NOT NULL,
    is_business_taxid       CHAR(1 BYTE) NOT NULL,
    is_tenant               CHAR(1 BYTE) NOT NULL,
    gross_income            FLOAT(53) NOT NULL,
    owner_name_original     VARCHAR2(200 BYTE) NOT NULL,
    owner_address_original  VARCHAR2(50 BYTE) NOT NULL,
    owner_city_original     VARCHAR2(100 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE INDEX ras.owner_name_address_idx ON
    ras.ras_individual_filer (
        tax_year
    ASC,
        owner_name_original
    ASC,
        owner_address_original
    ASC,
        owner_city_original
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX ras.pk_ras_individual_filer ON
    ras.ras_individual_filer (
        tax_year
    ASC,
        taxid
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_individual_filer
    ADD CONSTRAINT pk_ras_individual_filer PRIMARY KEY ( tax_year,
                                                         taxid )
        USING INDEX ras.pk_ras_individual_filer;

CREATE OR REPLACE PROCEDURE RAS.POPULATE_RAS_INDIVIDUAL_FILER AS 
BEGIN
    INSERT INTO RAS.RAS_INDIVIDUAL_FILER(
    TAX_YEAR, TAXID, PROPERTY_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME
    , OWN_RENTAL_PROPERTY, IS_BUSINESS_TAXID, IS_TENANT, GROSS_INCOME
    , OWNER_NAME_ORIGINAL
    )
    SELECT person.TAX_YEAR AS TAX_YEAR
    , generate_number AS TAX_ID
    , paddr.PROPERTY_ID AS PROPERTY_ID
    , EXTRACT_NAME_PART(person.OWNER_NAME, 'FIRST') AS FIRST_NAME
    , EXTRACT_NAME_PART(person.OWNER_NAME, 'MIDDLE') AS MIDDLE_NAME
    , EXTRACT_NAME_PART(person.OWNER_NAME, 'LAST') AS LAST_NAME
    , 'N' AS OWN_RENTAL_PROPERTY
    , 'N' AS IS_BUSINESS_TAXID
    , 'N' AS IS_TENANT
    , 0 AS GROSS_INCOME
    , person.OWNER_NAME AS OWNER_NAME_ORIGINAL
    FROM (
        SELECT rpd.LOAD_TAX_YEAR AS TAX_YEAR
        , rpd.OWNER_NAME
        , rpd.OWNER_ADDRESS
        , rpd.CITY_STATE_ORIGINAL
        , rpd.MUNICIPALITY_CODE
        , COUNT(*) property_count
        FROM RAS.RAS_PROPERTY_DESCRIPTION  rpd
        JOIN RAS.RAS_PROPERTY_TYPE rpt ON (rpt.PROPERTY_TYPE = rpd.PROPERTY_TYPE)
        LEFT JOIN RAS.RAS_INDIVIDUAL_FILER rif ON (rif.TAX_YEAR = rpd.LOAD_TAX_YEAR AND rif.OWNER_NAME_ORIGINAL = rpd.OWNER_NAME)
        WHERE rpt.PROPERTY_CLASS IN ('2', '3A', '3B', '4A', '4B', '4C' )
        AND rpd.MUNICIPALITY_CODE = '2012'
        --AND (rpd.OWNER_NAME LIKE 'NEW MEADOW %' OR rpd.OWNER_NAME LIKE 'MILLER%CHEVINE%')
        AND rif.OWNER_NAME_ORIGINAL IS NULL
        GROUP BY rpd.LOAD_TAX_YEAR, rpd.OWNER_NAME, rpd.OWNER_ADDRESS, rpd.CITY_STATE_ORIGINAL, rpd.MUNICIPALITY_CODE
        ORDER BY rpd.LOAD_TAX_YEAR, rpd.OWNER_NAME, rpd.OWNER_ADDRESS, rpd.CITY_STATE_ORIGINAL, rpd.MUNICIPALITY_CODE
        FETCH FIRST 10000 ROWS ONLY
    ) person
    LEFT JOIN (
        SELECT rpd.LOAD_TAX_YEAR
        , rpd.PROPERTY_ID
        , rpd.MUNICIPALITY_CODE
        , rpd.OWNER_NAME
        , rpd.OWNER_ADDRESS
        , rpd.CITY_STATE_ORIGINAL
        FROM RAS.RAS_PROPERTY_DESCRIPTION rpd
        WHERE rpd.PROPERTY_LOCATION = rpd.OWNER_ADDRESS
    ) paddr ON (paddr.OWNER_NAME = person.OWNER_NAME AND paddr.OWNER_ADDRESS = person.OWNER_ADDRESS)
    LEFT JOIN RAS.RAS_INDIVIDUAL_FILER rif ON (rif.TAX_YEAR = person.TAX_YEAR AND rif.OWNER_NAME_ORIGINAL = person.OWNER_NAME)
    WHERE rif.TAXID IS NULL;
END POPULATE_RAS_INDIVIDUAL_FILER;
/

CREATE TABLE ras.ras_landlord (
    tax_year             CHAR(4 BYTE) NOT NULL,
    taxid                CHAR(10 BYTE) NOT NULL,
    first_name           VARCHAR2(50 BYTE),
    middle_name          VARCHAR2(50 BYTE),
    last_name            VARCHAR2(50 BYTE),
    gross_income         FLOAT(53),
    is_business_taxid    CHAR(1 BYTE),
    address              VARCHAR2(50 BYTE),
    city                 VARCHAR2(50 BYTE),
    state                CHAR(2 BYTE),
    zip_code             CHAR(10 BYTE),
    country              CHAR(3 BYTE),
    owner_name_original  VARCHAR2(200 BYTE)
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_landlord_1 ON
    ras.ras_landlord (
        tax_year
    ASC,
        taxid
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE INDEX ras.ras_landlord_owner_name_address ON
    ras.ras_landlord (
        owner_name_original
    ASC,
        zip_code
    ASC,
        address
    ASC,
        city
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_landlord
    ADD CONSTRAINT pk_landlord_1 PRIMARY KEY ( tax_year,
                                               taxid )
        USING INDEX ras.pk_landlord_1;

CREATE OR REPLACE PROCEDURE RAS.POPULATE_RAS_LANDLORD AS 
BEGIN
    INSERT INTO RAS.RAS_LANDLORD(
        TAX_YEAR, TAXID
        , FIRST_NAME, MIDDLE_NAME, LAST_NAME
        , GROSS_INCOME, IS_BUSINESS_TAXID
        , ADDRESS, CITY, STATE, ZIP_CODE
        , COUNTRY, OWNER_NAME_ORIGINAL
    )
    SELECT llord.TAX_YEAR AS TAX_YEAR
    , generate_number() AS TAXID
    , EXTRACT_NAME_PART(llord.OWNER_NAME, 'FIRST') AS FIRST_NAME
    , EXTRACT_NAME_PART(llord.OWNER_NAME, 'MIDDLE') AS MIDDLE_NAME
    , EXTRACT_NAME_PART(llord.OWNER_NAME, 'LAST') AS LAST_NAME
    , 0 AS GROSS_INCOME
    , 'N' AS IS_BUSINESS_TAXID
    , llord.OWNER_ADDRESS AS OWNER_ADDRESS
    , llord.OWNER_CITY AS OWNER_CITY
    , '' AS STATE
    , llord.OWNER_ZIPCODE AS OWNER_ZIPCODE
    , '' AS COUNTRY
    , llord.OWNER_NAME AS OWNER_NAME_ORIGINAL
    FROM (
        SELECT rpd.LOAD_TAX_YEAR AS TAX_YEAR
        , rpd.OWNER_NAME AS OWNER_NAME
        , rpd.OWNER_ADDRESS AS OWNER_ADDRESS
        , rpd.OWNER_CITY AS OWNER_CITY
        , rpd.OWNER_ZIPCODE AS OWNER_ZIPCODE
        , COUNT(*) AUDIT_COUNT
        FROM RAS.RAS_AUDIT_STATUS ras
        JOIN RAS.RAS_AUDIT_VIOLATION rav ON (rav.STATUS_ID = ras.STATUS_ID)
        JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.LOAD_TAX_YEAR = rav.TAX_YEAR AND rav.PROPERTY_ID = rpd.PROPERTY_ID)
        WHERE ras.AUDIT_STATUS IN ('CONFIRMED')
--      AND rpd.OWNER_NAME LIKE 'MILLER%CHEVINE%'
        GROUP BY rpd.LOAD_TAX_YEAR, rpd.OWNER_NAME, rpd.OWNER_ADDRESS, rpd.OWNER_CITY, rpd.OWNER_ZIPCODE
        ORDER BY COUNT(*) DESC
        FETCH NEXT 50000 ROWS ONLY
    ) llord
    LEFT JOIN RAS.RAS_LANDLORD rll ON (rll.TAX_YEAR = llord.TAX_YEAR AND rll.OWNER_NAME_ORIGINAL = llord.OWNER_NAME AND rll.ADDRESS = llord.OWNER_ADDRESS)
    WHERE rll.TAX_YEAR IS NULL;
END POPULATE_RAS_LANDLORD;
/

CREATE OR REPLACE PROCEDURE RAS.POPULATE_RAS_PROPERTY AS 
BEGIN
    INSERT INTO RAS.RAS_PROPERTY(
        TAX_YEAR, LANDLORD_TAX_ID, PROPERTY_ID, PERCENTAGE_OWNED
        , RENTAL_INCOME_RECEIVED, NUMBER_OF_PROPERTY_OWNERS
        , TOTAL_DEDUCTIONS, PROPERTY_TAXES
        , STATE, MUNICIPALITY_CODE
    )
    SELECT
    llprops.TAX_YEAR
    , llprops.LANDLORD_TAX_ID
    , llprops.PROPERTY_ID
    , 100 AS PERCENTAGE_OWNED
    , 0 AS RENTAL_INCOME_RECEIVED
    , 1 AS NUMBER_OF_PROPERTY_OWNERS
    , 0 AS TOTAL_DEDUCTIONS
    , 0 AS PROPERTY_TAXES
    , llprops.STATE
    , llprops.MUNICIPALITY_CODE
    FROM (
        SELECT rll.TAX_YEAR AS TAX_YEAR
        , rll.TAXID AS LANDLORD_TAX_ID
        , rpd.PROPERTY_ID AS PROPERTY_ID
        , rpd.STATE AS STATE
        , rpd.MUNICIPALITY_CODE AS MUNICIPALITY_CODE
        FROM RAS.RAS_LANDLORD rll
        JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.LOAD_TAX_YEAR = rll.TAX_YEAR
            AND rpd.OWNER_NAME = rll.OWNER_NAME_ORIGINAL
            AND rpd.OWNER_ADDRESS = rll.ADDRESS
            AND rpd.OWNER_CITY = rll.CITY
--            AND rpd.OWNER_NAME LIKE 'MILLER%CHEVINE%'
        )
        JOIN RAS.RAS_AUDIT_VIOLATION rav ON (rav.TAX_YEAR = rll.TAX_YEAR
            AND rav.PROPERTY_ID = rpd.PROPERTY_ID
        )
        GROUP BY rll.TAX_YEAR, rll.TAXID, rpd.PROPERTY_ID, rpd.STATE, rpd.MUNICIPALITY_CODE
    ) llprops
    LEFT OUTER JOIN RAS.RAS_PROPERTY rp ON (rp.TAX_YEAR = llprops.TAX_YEAR
        AND rp.LANDLORD_TAX_ID = llprops.LANDLORD_TAX_ID
        AND rp.PROPERTY_ID = llprops.PROPERTY_ID
    )
    WHERE rp.PROPERTY_ID IS NULL;
END POPULATE_RAS_PROPERTY;
/

CREATE TABLE ras.ras_household_unit (
    tax_year         CHAR(4 BYTE) NOT NULL,
    taxid            CHAR(10 BYTE) NOT NULL,
    property_id      NUMBER(18) NOT NULL,
    tenant_taxid     CHAR(10 BYTE) NOT NULL,
    relationship_id  NUMBER(*, 0),
    tax_dependant    CHAR(1 BYTE)
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE TABLE ras.ras_household_unit_by_tenant (
    tax_year              CHAR(4 BYTE) NOT NULL,
    tenant_tax_id         CHAR(10 BYTE) NOT NULL,
    property_id           NUMBER(18) NOT NULL,
    landlord_first_name   VARCHAR2(50 BYTE) NOT NULL,
    landlord_middle_name  VARCHAR2(50 BYTE),
    landlord_last_name    VARCHAR2(50 BYTE),
    landlord_tax_id       CHAR(10 BYTE)
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_ras_household_unit_by_tenant ON
    ras.ras_household_unit_by_tenant (
        tax_year
    ASC,
        tenant_tax_id
    ASC,
        property_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_household_unit_by_tenant
    ADD CONSTRAINT pk_ras_household_unit_by_tenant PRIMARY KEY ( tax_year,
                                                                 tenant_tax_id,
                                                                 property_id )
        USING INDEX ras.pk_ras_household_unit_by_tenant;

CREATE TABLE ras.ras_ll_property_details (
    tax_year         CHAR(4 BYTE) NOT NULL,
    landlord_tax_id  CHAR(10 BYTE) NOT NULL,
    property_id      NUMBER(18) NOT NULL,
    apartment_count  NUMBER(*, 0) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_ras_ll_property_details ON
    ras.ras_ll_property_details (
        tax_year
    ASC,
        landlord_tax_id
    ASC,
        property_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_ll_property_details
    ADD CONSTRAINT pk_ras_ll_property_details PRIMARY KEY ( tax_year,
                                                            landlord_tax_id,
                                                            property_id )
        USING INDEX ras.pk_ras_ll_property_details;

CREATE TABLE ras.ras_ll_rental_income (
    tax_year         CHAR(4 BYTE) NOT NULL,
    landlord_tax_id  CHAR(10 BYTE) NOT NULL,
    property_id      NUMBER(18) NOT NULL,
    rental_income    FLOAT(53) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_ras_ll_rental_income ON
    ras.ras_ll_rental_income (
        tax_year
    ASC,
        landlord_tax_id
    ASC,
        property_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_ll_rental_income
    ADD CONSTRAINT pk_ras_ll_rental_income PRIMARY KEY ( tax_year,
                                                         landlord_tax_id,
                                                         property_id )
        USING INDEX ras.pk_ras_ll_rental_income;

CREATE TABLE ras.ras_ll_rental_income_history (
    tax_year         CHAR(4 BYTE) NOT NULL,
    landlord_tax_id  CHAR(10 BYTE) NOT NULL,
    property_id      NUMBER(18) NOT NULL,
    rental_income    FLOAT(53) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_ras_ll_rental_income_history ON
    ras.ras_ll_rental_income_history (
        tax_year
    ASC,
        landlord_tax_id
    ASC,
        property_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_ll_rental_income_history
    ADD CONSTRAINT pk_ras_ll_rental_income_history PRIMARY KEY ( tax_year,
                                                                 landlord_tax_id,
                                                                 property_id )
        USING INDEX ras.pk_ras_ll_rental_income_history;

CREATE TABLE ras.ras_login (
    taxid            CHAR(10 BYTE) NOT NULL,
    first_name       VARCHAR2(30 BYTE) NOT NULL,
    middle_name      VARCHAR2(30 BYTE),
    last_name        VARCHAR2(30 BYTE) NOT NULL,
    login_name       VARCHAR2(30 BYTE) NOT NULL,
    email_address    VARCHAR2(50 BYTE),
    business_entity  CHAR(1 BYTE) DEFAULT ( 0 ) NOT NULL,
    last_access      DATE,
    ip_address       CHAR(15 BYTE) DEFAULT '0.0.0.0' NOT NULL,
    password         CHAR(20 BYTE) NOT NULL,
    failed_attempts  NUMBER(*, 0) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_ras_login ON
    ras.ras_login (
        taxid
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_login
    ADD CONSTRAINT pk_ras_login PRIMARY KEY ( taxid )
        USING INDEX ras.pk_ras_login;

CREATE TABLE ras.ras_municipality (
    state         CHAR(2 BYTE) NOT NULL,
    code          CHAR(4 BYTE) NOT NULL,
    municipality  VARCHAR2(255 BYTE) NOT NULL,
    county        VARCHAR2(255 BYTE) NOT NULL,
    latitude      NUMBER,
    longitude     NUMBER
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_municipality_nj ON
    ras.ras_municipality (
        state
    ASC,
        code
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_municipality
    ADD CONSTRAINT pk_municipality_nj PRIMARY KEY ( state,
                                                    code )
        USING INDEX ras.pk_municipality_nj;

CREATE TABLE ras.ras_property_base_year (
    tax_year     CHAR(4 BYTE) NOT NULL,
    property_id  NUMBER(18) NOT NULL,
    state        CHAR(2 BYTE) NOT NULL,
    code         CHAR(4 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.ras_property_base_year_pk ON
    ras.ras_property_base_year (
        tax_year
    ASC,
        property_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE INDEX ras.rpby_property_id ON
    ras.ras_property_base_year (
        property_id
    ASC,
        tax_year
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_property_base_year
    ADD CONSTRAINT ras_property_base_year_pk PRIMARY KEY ( tax_year,
                                                           property_id )
        USING INDEX ras.ras_property_base_year_pk;

CREATE TABLE ras.ras_property_to_tenant (
    tax_year               CHAR(4 BYTE) NOT NULL,
    tenant_tax_id          CHAR(10 BYTE) NOT NULL,
    property_id            NUMBER(18) NOT NULL,
    apartment              CHAR(10 BYTE),
    total_rental_payments  FLOAT(53) NOT NULL,
    start_lease_date       DATE,
    end_lease_date         DATE,
    state                  CHAR(2 BYTE) NOT NULL,
    municipality_code      CHAR(4 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE INDEX ras.index1 ON
    ras.ras_property_to_tenant (
        tenant_tax_id
    ASC,
        property_id
    ASC,
        tax_year
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE INDEX ras.index2 ON
    ras.ras_property_to_tenant (
        property_id
    ASC,
        tenant_tax_id
    ASC,
        tax_year
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX ras.pk_ras_property_to_tenant ON
    ras.ras_property_to_tenant (
        tax_year
    ASC,
        tenant_tax_id
    ASC,
        property_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_property_to_tenant
    ADD CONSTRAINT pk_ras_property_to_tenant PRIMARY KEY ( tax_year,
                                                           tenant_tax_id,
                                                           property_id )
        USING INDEX ras.pk_ras_property_to_tenant;

CREATE TABLE ras.ras_relationship (
    relationship_id  NUMBER(3) DEFAULT ras.relationship_id_seq.nextval NOT NULL,
    relationship     CHAR(20 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_relationship ON
    ras.ras_relationship (
        relationship_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_relationship
    ADD CONSTRAINT pk_relationship PRIMARY KEY ( relationship_id )
        USING INDEX ras.pk_relationship;

CREATE TABLE ras.ras_report (
    report_id        NUMBER(*, 0) DEFAULT ras.report_id_seq.nextval NOT NULL,
    category_id      NUMBER(*, 0) NOT NULL,
    report_name      VARCHAR2(1024 BYTE) NOT NULL,
    audit_points     NUMBER(*, 0),
    adf_view_object  VARCHAR2(50 BYTE),
    description      VARCHAR2(512 BYTE)
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_ras_report ON
    ras.ras_report (
        report_id
    ASC,
        category_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_report
    ADD CONSTRAINT pk_ras_report PRIMARY KEY ( report_id,
                                               category_id )
        USING INDEX ras.pk_ras_report;

CREATE TABLE ras.ras_report_category (
    category_id  NUMBER(*, 0) DEFAULT ras.category_id_seq.nextval NOT NULL,
    name         VARCHAR2(30 BYTE) NOT NULL,
    description  VARCHAR2(1024 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_ras_report_category ON
    ras.ras_report_category (
        category_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_report_category
    ADD CONSTRAINT pk_ras_report_category PRIMARY KEY ( category_id )
        USING INDEX ras.pk_ras_report_category;

CREATE TABLE ras.ras_state (
    state_code    CHAR(2 BYTE) NOT NULL,
    state_name    VARCHAR2(100 BYTE) NOT NULL,
    country_code  CHAR(3 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE INDEX ras.ras_country_index1 ON
    ras.ras_state (
        country_code
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE INDEX ras.ras_name_idx ON
    ras.ras_state (
        state_name
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE UNIQUE INDEX ras.ras_state_pk ON
    ras.ras_state (
        state_code
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_state
    ADD CONSTRAINT ras_state_pk PRIMARY KEY ( state_code )
        USING INDEX ras.ras_state_pk;

CREATE TABLE ras.ras_state_county (
    state_code  CHAR(2 BYTE) NOT NULL,
    county      VARCHAR2(255 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.ras_state_county_pk ON
    ras.ras_state_county (
        state_code
    ASC,
        county
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_state_county
    ADD CONSTRAINT ras_state_county_pk PRIMARY KEY ( state_code,
                                                     county )
        USING INDEX ras.ras_state_county_pk;

CREATE TABLE ras.ras_tenant_payment_history (
    tax_year        CHAR(4 BYTE) NOT NULL,
    tenant_tax_id   CHAR(10 BYTE) NOT NULL,
    property_id     NUMBER(18) NOT NULL,
    total_payments  FLOAT(53) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.pk_ras_tenant_payment_history ON
    ras.ras_tenant_payment_history (
        tax_year
    ASC,
        tenant_tax_id
    ASC,
        property_id
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

ALTER TABLE ras.ras_tenant_payment_history
    ADD CONSTRAINT pk_ras_tenant_payment_history PRIMARY KEY ( tax_year,
                                                               tenant_tax_id,
                                                               property_id )
        USING INDEX ras.pk_ras_tenant_payment_history;

CREATE TABLE ras.ras_year (
    tax_year CHAR(4 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

CREATE UNIQUE INDEX ras.tax_year_pk ON
    ras.ras_year (
        tax_year
    ASC )
        TABLESPACE users PCTFREE 10
            STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
            DEFAULT )
        LOGGING;

CREATE TABLE ras.tenant_name (
    name_id     NUMBER(*, 0) DEFAULT ras.name_id_seq.nextval NOT NULL,
    first_name  VARCHAR2(100 BYTE) NOT NULL,
    last_name   VARCHAR2(100 BYTE) NOT NULL
)
PCTFREE 10 PCTUSED 40 TABLESPACE users LOGGING
    STORAGE ( INITIAL 65536 NEXT 1048576 PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS 2147483645 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL
    DEFAULT )
NO INMEMORY;

ALTER TABLE ras.ras_household_unit_by_tenant
    ADD CONSTRAINT fk_ras_household_unit_by_tenant_ras_tenant_payment_history FOREIGN KEY ( tax_year,
                                                                                            tenant_tax_id,
                                                                                            property_id )
        REFERENCES ras.ras_tenant_payment_history ( tax_year,
                                                    tenant_tax_id,
                                                    property_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_household_unit
    ADD CONSTRAINT fk_ras_household_unit_ras_individual_filer FOREIGN KEY ( tax_year,
                                                                            taxid )
        REFERENCES ras.ras_individual_filer ( tax_year,
                                              taxid )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_household_unit
    ADD CONSTRAINT fk_ras_household_unit_ras_relationship FOREIGN KEY ( relationship_id )
        REFERENCES ras.ras_relationship ( relationship_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_household_unit
    ADD CONSTRAINT fk_ras_household_unit_tax_year_property_id FOREIGN KEY ( tax_year,
                                                                            property_id )
        REFERENCES ras.ras_property_base_year ( tax_year,
                                                property_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_ll_property_details
    ADD CONSTRAINT fk_ras_ll_property_details_ras_property FOREIGN KEY ( tax_year,
                                                                         landlord_tax_id,
                                                                         property_id )
        REFERENCES ras.ras_property ( tax_year,
                                      landlord_tax_id,
                                      property_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_ll_rental_income_history
    ADD CONSTRAINT fk_ras_ll_rental_income_history_ras_property FOREIGN KEY ( tax_year,
                                                                              landlord_tax_id,
                                                                              property_id )
        REFERENCES ras.ras_property ( tax_year,
                                      landlord_tax_id,
                                      property_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_property_description
    ADD CONSTRAINT fk_ras_property_description_ras_property_type FOREIGN KEY ( property_type )
        REFERENCES ras.ras_property_type ( property_type )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_property
    ADD CONSTRAINT fk_ras_property_ras_landlord FOREIGN KEY ( tax_year,
                                                              landlord_tax_id )
        REFERENCES ras.ras_landlord ( tax_year,
                                      taxid )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_property
    ADD CONSTRAINT fk_ras_property_ras_municipality FOREIGN KEY ( state,
                                                                  municipality_code )
        REFERENCES ras.ras_municipality ( state,
                                          code )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_property
    ADD CONSTRAINT fk_ras_property_ras_property_description FOREIGN KEY ( property_id )
        REFERENCES ras.ras_property_description ( property_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_report
    ADD CONSTRAINT fk_ras_report_ras_report_category FOREIGN KEY ( category_id )
        REFERENCES ras.ras_report_category ( category_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_tenant_payment_history
    ADD CONSTRAINT fk_ras_tenant_payment_history_ras_individual_filer FOREIGN KEY ( tax_year,
                                                                                    tenant_tax_id )
        REFERENCES ras.ras_individual_filer ( tax_year,
                                              taxid )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_tenant_payment_history
    ADD CONSTRAINT fk_ras_tenant_payment_history_tax_year_property_id FOREIGN KEY ( tax_year,
                                                                                    property_id )
        REFERENCES ras.ras_property_base_year ( tax_year,
                                                property_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_ll_property_details
    ADD CONSTRAINT property_id_fk FOREIGN KEY ( property_id )
        REFERENCES ras.ras_property_description ( property_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_audit_violation
    ADD CONSTRAINT ras_audit_violation_ras_audit_status_fk FOREIGN KEY ( status_id )
        REFERENCES ras.ras_audit_status ( status_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_municipality
    ADD CONSTRAINT ras_municipality_ras_state_county_state_county_fk FOREIGN KEY ( state,
                                                                                   county )
        REFERENCES ras.ras_state_county ( state_code,
                                          county )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_property_base_year
    ADD CONSTRAINT ras_property_base_year_to_ras_municipality FOREIGN KEY ( state,
                                                                            code )
        REFERENCES ras.ras_municipality ( state,
                                          code )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_state_county
    ADD CONSTRAINT ras_state_county_ras_state_state_name FOREIGN KEY ( state_code )
        REFERENCES ras.ras_state ( state_code )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_audit_violation
    ADD CONSTRAINT rav_audit_id_fk FOREIGN KEY ( audit_id )
        REFERENCES ras.ras_audit ( audit_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_property_base_year
    ADD CONSTRAINT rpby_property_id_fk FOREIGN KEY ( property_id )
        REFERENCES ras.ras_property_description ( property_id )
    NOT DEFERRABLE;

ALTER TABLE ras.ras_property_description
    ADD CONSTRAINT rpd_property_id_fk FOREIGN KEY ( property_id )
        REFERENCES ras.ras_property_description ( property_id )
    NOT DEFERRABLE;

CREATE OR REPLACE VIEW RAS.PROPERTIES_WITH_TENANTS_VW ( STATE, COUNTY, MUNICIPALITY, TAX_YEAR, FIRST_NAME, LAST_NAME, TAXID, GROSS_INCOME, TOTAL_RENTAL_PAYMENTS, PROPERTY_LOCATION, PROPERTY_CITY, PROPERTY_COUNTRY, PROPERTY_TYPE, CENSUS_TRACT, CENSUS_BLOCK, YEAR_CONSTRUCTED, BLOCK, LOT, PROPERTY_ID, LONGITUDE, LATITUDE ) AS
SELECT rm.STATE 
    , rm.COUNTY
    , rm.MUNICIPALITY
    , rptt.TAX_YEAR
    , rif.FIRST_NAME
    , rif.LAST_NAME
    , rif.TAXID
    , rif.GROSS_INCOME
    , rptt.TOTAL_RENTAL_PAYMENTS
    , rpd.PROPERTY_LOCATION
    , rpd.PROPERTY_CITY
    , rpd.PROPERTY_COUNTRY
    , rpt.PROPERTY_DESCRIPTION AS PROPERTY_TYPE
    , rpd.CENSUS_TRACT
    , rpd.CENSUS_BLOCK
    , rpd.YEAR_CONSTRUCTED
    , rpd.BLOCK
    , rpd.LOT
    , rpd.PROPERTY_ID
    , rpd.LONGITUDE
    , rpd.LATITUDE
    FROM RAS.RAS_PROPERTY_TO_TENANT rptt
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rptt.STATE AND rm.CODE = rptt.MUNICIPALITY_CODE)
    JOIN RAS.RAS_INDIVIDUAL_FILER rif ON (rif.TAX_YEAR = rptt.TAX_YEAR AND rif.TAXID = rptt.TENANT_TAX_ID)
    JOIN RAS.RAS_PROPERTY_BASE_YEAR rpby ON (rptt.TAX_YEAR = rpby.TAX_YEAR AND rptt.PROPERTY_ID = rpby.PROPERTY_ID)
    JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_ID = rpby.PROPERTY_ID)
    JOIN RAS.RAS_PROPERTY_TYPE rpt ON (rpt.PROPERTY_TYPE = rpd.PROPERTY_TYPE) 
;

CREATE OR REPLACE VIEW RAS.LANDLORD_PROFILE_VW ( FIRST_NAME, MIDDLE_NAME, LAST_NAME, GROSS_INCOME, ADDRESS, CITY, STATE, ZIP_CODE, COUNTRY, TAX_YEAR, LANDLORD_TAX_ID, PROPERTY_COUNT, RENTAL_INCOME_RECEIVED, TOTAL_RENTAL_PAYMENTS, RENTAL_INCOME_DIFFERENCE, TOTAL_DEDUCTIONS, PROPERTY_TAXES ) AS
SELECT rl.FIRST_NAME
    , rl.MIDDLE_NAME
    , rl.LAST_NAME
    , rl.GROSS_INCOME
    , rl.ADDRESS
    , rl.CITY
    , rl.STATE
    , rl.ZIP_CODE
    , rl.COUNTRY
    , ll.TAX_YEAR
    , ll.LANDLORD_TAX_ID
    , ll.PROPERTY_COUNT
    , ll.RENTAL_INCOME_RECEIVED
    , tnt.TOTAL_RENTAL_PAYMENTS
    , ll.RENTAL_INCOME_RECEIVED - tnt.TOTAL_RENTAL_PAYMENTS AS RENTAL_INCOME_DIFFERENCE
    , ll.TOTAL_DEDUCTIONS
    , ll.PROPERTY_TAXES
    FROM (
                SELECT rp.TAX_YEAR
        , rp.LANDLORD_TAX_ID
        , COUNT(rp.PROPERTY_ID) AS PROPERTY_COUNT
        , SUM(rp.RENTAL_INCOME_RECEIVED) AS RENTAL_INCOME_RECEIVED
        , SUM(rp.TOTAL_DEDUCTIONS) AS TOTAL_DEDUCTIONS
        , SUM(rp.PROPERTY_TAXES) AS PROPERTY_TAXES
        FROM RAS.RAS_PROPERTY rp
        GROUP BY rp.TAX_YEAR, rp.LANDLORD_TAX_ID
    ) ll
    JOIN (
        SELECT ll.TAX_YEAR
        , ll.LANDLORD_TAX_ID
        , ll.FIRST_NAME
        , ll.LAST_NAME
        , COUNT(*) AS PROPERTY_COUNT
        , SUM(ll.TOTAL_RENTAL_PAYMENTS) AS TOTAL_RENTAL_PAYMENTS
        FROM (
                        SELECT rp.TAX_YEAR
            , rp.LANDLORD_TAX_ID
            , rl.FIRST_NAME
            , rl.LAST_NAME
            , rp.PROPERTY_ID
            , tnt.TOTAL_RENTAL_PAYMENTS
            FROM RAS.RAS_PROPERTY rp
            JOIN RAS.RAS_LANDLORD rl ON (rl.TAX_YEAR = rp.TAX_YEAR AND rl.TAXID = rp.LANDLORD_TAX_ID)
            JOIN (
                SELECT pwtv.TAX_YEAR
                , pwtv.PROPERTY_ID
                , SUM(pwtv.TOTAL_RENTAL_PAYMENTS) AS TOTAL_RENTAL_PAYMENTS
                FROM RAS.PROPERTIES_WITH_TENANTS_VW pwtv
                GROUP BY pwtv.TAX_YEAR, pwtv.PROPERTY_ID
            ) tnt ON (tnt.TAX_YEAR = rp.TAX_YEAR AND tnt.PROPERTY_ID = rp.PROPERTY_ID)
        ) ll
        GROUP BY ll.TAX_YEAR, ll.LANDLORD_TAX_ID, ll.FIRST_NAME, ll.LAST_NAME
    ) tnt ON (tnt.TAX_YEAR = ll.TAX_YEAR AND tnt.LANDLORD_TAX_ID = ll.LANDLORD_TAX_ID)
    JOIN RAS.RAS_LANDLORD rl ON (rl.TAX_YEAR = ll.TAX_YEAR AND rl.TAXID = ll.LANDLORD_TAX_ID) 
;

CREATE OR REPLACE VIEW RAS.LANDLORD_PROPERTIES_BY_CITY ( STATE, COUNTY, MUNICIPALITY, TAX_YEAR, FIRST_NAME, LAST_NAME, TAXID, LANDLORD_ADDRESS, LANDLORD_CITY, LANDLORD_STATE, AUDIT_VIOLATIONS, PROPERTY_LOCATION, PROPERTY_CITY, PROPERTY_STATE, PROPERTY_ID, RENTAL_INCOME_RECEIVED ) AS
SELECT rm.STATE
    , rm.COUNTY
    , rm.MUNICIPALITY
    , rp.TAX_YEAR
    , rl.FIRST_NAME
    , rl.LAST_NAME
    , rl.TAXID
    , rl.ADDRESS AS LANDLORD_ADDRESS
    , rl.CITY AS LANDLORD_CITY
    , rl.STATE AS LANDLORD_STATE
    , rav.VIOLATION_POINTS AS AUDIT_VIOLATIONS
    , rpd.PROPERTY_LOCATION
    , rpd.PROPERTY_CITY
    , rpd.STATE AS PROPERTY_STATE
    , rpd.PROPERTY_ID
    , rp.RENTAL_INCOME_RECEIVED
    FROM RAS.RAS_MUNICIPALITY rm
    JOIN RAS.RAS_PROPERTY rp ON (rp.STATE = rm.STATE AND rp.MUNICIPALITY_CODE = rm.CODE)
    JOIN RAS.RAS_LANDLORD rl ON (rl.TAXID = rp.LANDLORD_TAX_ID AND rl.TAX_YEAR = rp.TAX_YEAR)
    JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_ID = rp.PROPERTY_ID)
    JOIN (
        SELECT rav.TAX_YEAR
        , rav.PROPERTY_ID
        , SUM(ra.VIOLATION_POINTS) AS VIOLATION_POINTS
        FROM RAS.RAS_AUDIT_VIOLATION rav
        JOIN RAS.RAS_AUDIT ra ON (ra.AUDIT_ID = rav.AUDIT_ID)
        GROUP BY rav.TAX_YEAR, rav.PROPERTY_ID
    ) rav ON (rav.TAX_YEAR = rp.TAX_YEAR AND rav.PROPERTY_ID = rp.PROPERTY_ID) 
;

CREATE OR REPLACE VIEW RAS.LANDLORDS_BY_CITY ( TAX_YEAR, TAXID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, GROSS_INCOME, ADDRESS, CITY, STATE, ZIP_CODE, COUNTRY, RENTAL_PROPERTY_COUNT ) AS
SELECT rl.TAX_YEAR
    , rl.TAXID
    , rl.FIRST_NAME
    , rl.MIDDLE_NAME
    , rl.LAST_NAME
    , rl.GROSS_INCOME
    , rl.ADDRESS
    , rl.CITY
    , rl.STATE
    , rl.ZIP_CODE
    , rl.COUNTRY
    , count(*) AS RENTAL_PROPERTY_COUNT
    FROM RAS.RAS_LANDLORD rl
    JOIN RAS.RAS_PROPERTY rp ON (rp.TAX_YEAR = rl.TAX_YEAR AND rp.LANDLORD_TAX_ID = rl.TAXID)
    GROUP BY rl.TAX_YEAR, rl.TAXID, rl.FIRST_NAME, rl.MIDDLE_NAME, rl.LAST_NAME, rl.GROSS_INCOME, rl.ADDRESS, rl.CITY, rl.STATE, rl.ZIP_CODE, rl.COUNTRY 
;

CREATE OR REPLACE VIEW RAS.PROPERTIES_WITH_TENANTS ( STATE, COUNTY, MUNICIPALITY, TAX_YEAR, FIRST_NAME, LAST_NAME, TAXID, GROSS_INCOME, TOTAL_RENTAL_PAYMENTS, PROPERTY_ID, PROPERTY_LOCATION, OWNER_NAME, OWNER_STATE, OWNER_CITY, OWNER_ADDRESS, OWNER_ZIPCODE, CENSUS_TRACT, CENSUS_BLOCK, YEAR_CONSTRUCTED, BLOCK, LOT ) AS
SELECT rm.STATE 
    , rm.COUNTY
    , rm.MUNICIPALITY
    , rptt.TAX_YEAR
    , rif.FIRST_NAME
    , rif.LAST_NAME
    , rif.TAXID
    , rif.GROSS_INCOME
    , rptt.TOTAL_RENTAL_PAYMENTS
    , rpd.PROPERTY_ID
    , rpd.PROPERTY_LOCATION
    , rpd.OWNER_NAME
    , rpd.OWNER_STATE
    , rpd.OWNER_CITY
    , rpd.OWNER_ADDRESS
    , rpd.OWNER_ZIPCODE
    , rpd.CENSUS_TRACT
    , rpd.CENSUS_BLOCK
    , rpd.YEAR_CONSTRUCTED
    , rpd.BLOCK
    , rpd.LOT
    FROM RAS.RAS_PROPERTY_TO_TENANT rptt
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rptt.STATE AND rm.CODE = rptt.MUNICIPALITY_CODE)
    JOIN RAS.RAS_INDIVIDUAL_FILER rif ON (rif.TAX_YEAR = rptt.TAX_YEAR AND rif.TAXID = rptt.TENANT_TAX_ID)
    JOIN RAS.RAS_PROPERTY_BASE_YEAR rpby ON (rptt.TAX_YEAR = rpby.TAX_YEAR AND rptt.PROPERTY_ID = rpby.PROPERTY_ID)
    JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_ID = rpby.PROPERTY_ID) 
;

CREATE OR REPLACE VIEW RAS.PROPERTY_VIOLATION_VW ( TAX_YEAR, AUDIT_NAME, VIOLATION_POINTS, AUDIT_STATUS, DESCRIPTION, PROPERTY_ID ) AS
SELECT rav.TAX_YEAR
    , ra.AUDIT_NAME
    , ra.VIOLATION_POINTS
    , ras.AUDIT_STATUS
    , ras.DESCRIPTION
    , rav.PROPERTY_ID
    FROM RAS.RAS_AUDIT_VIOLATION rav
    JOIN RAS.RAS_AUDIT ra ON (ra.AUDIT_ID = rav.AUDIT_ID)
    JOIN RAS.RAS_AUDIT_STATUS ras ON (ras.STATUS_ID = rav.STATUS_ID) 
;

CREATE OR REPLACE VIEW RAS.RAS_AUDIT_VIOLATIONS_BY_CITY ( STATE, COUNTY, MUNICIPALITY, AUDIT_NAME, AUDIT_COUNT ) AS
SELECT rsc.STATE_CODE AS STATE
    , rsc.COUNTY
    , rm.MUNICIPALITY
    , ra.AUDIT_NAME
    , count(*) AS AUDIT_COUNT
    FROM RAS.RAS_PROPERTY rp
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rp.STATE AND rm.CODE = rp.MUNICIPALITY_CODE)
    JOIN RAS.RAS_STATE_COUNTY rsc ON (rsc.STATE_CODE = rm.STATE AND rsc.COUNTY = rm.COUNTY)
    JOIN RAS.RAS_AUDIT_VIOLATION rav ON (rav.TAX_YEAR = rp.TAX_YEAR AND rav.PROPERTY_ID = rp.PROPERTY_ID)
    JOIN RAS.RAS_AUDIT ra ON (ra.AUDIT_ID = rav.AUDIT_ID)
    GROUP BY rsc.STATE_CODE, rsc.COUNTY, rm.MUNICIPALITY, ra.AUDIT_NAME 
;

CREATE OR REPLACE VIEW RAS.RAS_RENTAL_PROPERTIES_BY_CITY ( STATE_CODE, COUNTY, MUNICIPALITY, TAX_YEAR, PROPERTY_COUNT, RENTAL_INCOME_RECEIVED ) AS
SELECT st.STATE_CODE 
    , stcnty.COUNTY 
    , mun.MUNICIPALITY
    , prop.TAX_YEAR 
    , COUNT(*) AS PROPERTY_COUNT
    , SUM(prop.RENTAL_INCOME_RECEIVED) AS RENTAL_INCOME_RECEIVED
    FROM RAS.RAS_STATE st 
    JOIN RAS.RAS_STATE_COUNTY stcnty ON (stcnty.STATE_CODE = st.STATE_CODE) 
    JOIN RAS.RAS_MUNICIPALITY mun ON (mun.STATE = stcnty.STATE_CODE AND mun.COUNTY = stcnty.COUNTY) 
    JOIN RAS.RAS_PROPERTY prop ON (prop.STATE = mun.STATE AND prop.MUNICIPALITY_CODE = mun.CODE) 
    GROUP BY st.STATE_CODE, stcnty.COUNTY, mun.MUNICIPALITY, prop.TAX_YEAR 
;

CREATE OR REPLACE VIEW RAS.RAS_REPORTS_VW ( CATEGORY, REPORT_NAME, AUDIT_POINTS, REPORT_DESCRIPTION, CATEGORY_DESCRIPTION, ADF_VIEW_OBJECT ) AS
SELECT rrc.NAME AS CATEGORY
    , rr.REPORT_NAME
    , rr.AUDIT_POINTS
    , rr.DESCRIPTION AS REPORT_DESCRIPTION
    , rrc.DESCRIPTION AS CATEGORY_DESCRIPTION
    , rr.ADF_VIEW_OBJECT
    FROM RAS.RAS_REPORT_CATEGORY rrc
    JOIN RAS.RAS_REPORT rr ON (rr.CATEGORY_ID = rrc.CATEGORY_ID) 
;

CREATE OR REPLACE VIEW RAS.RENTAL_PROPERTY_INFO_VW ( TAX_YEAR, STATE, COUNTY, MUNICIPALITY, PROPERTY_ID, PROPERTY_DESCRIPTION, LANDLORD_TAX_ID, PERCENTAGE_OWNED, RENTAL_INCOME_RECEIVED, TOTAL_DEDUCTIONS, PROPERTY_TAXES, PROPERTY_LOCATION, TAX_ACCOUNT_NUMBER, BLOCK, LOT, CENSUS_TRACT, CENSUS_BLOCK, YEAR_CONSTRUCTED, DEED_BOOK, DEED_PAGE, DEED_DATE, OWNER_NAME, OWNER_CITY, OWNER_STATE, OWNER_ADDRESS, OWNER_ZIPCODE, OWNER_COUNTRY ) AS
SELECT rpby.TAX_YEAR
    , rpby.STATE
    , rm.COUNTY
    , rm.MUNICIPALITY
    , rpby.PROPERTY_ID
    , rpt.PROPERTY_DESCRIPTION
    , rp.LANDLORD_TAX_ID
    , rp.PERCENTAGE_OWNED
    , rp.RENTAL_INCOME_RECEIVED
    , rp.TOTAL_DEDUCTIONS
    , rp.PROPERTY_TAXES
    , rpd.PROPERTY_LOCATION
    , rpd.TAX_ACCOUNT_NUMBER
    , rpd.BLOCK
    , rpd.LOT
    , rpd.CENSUS_TRACT
    , rpd.CENSUS_BLOCK
    , rpd.YEAR_CONSTRUCTED
    , rpd.DEED_BOOK
    , rpd.DEED_PAGE
    , rpd.DEED_DATE
    , rpd.OWNER_NAME
    , rpd.OWNER_CITY
    , rpd.OWNER_STATE
    , rpd.OWNER_ADDRESS
    , rpd.OWNER_ZIPCODE
    , rpd.OWNER_COUNTRY
    FROM RAS.RAS_PROPERTY_BASE_YEAR rpby
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rpby.STATE AND rm.CODE = rpby.CODE)
    JOIN RAS.RAS_PROPERTY rp ON (rp.TAX_YEAR = rpby.TAX_YEAR AND rp.STATE = rpby.STATE AND rp.PROPERTY_ID = rpby.PROPERTY_ID)
    JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_ID = rp.PROPERTY_ID)
    JOIN RAS.RAS_PROPERTY_TYPE rpt ON (rpt.PROPERTY_TYPE = rpd.PROPERTY_TYPE) 
;

CREATE OR REPLACE VIEW RAS.RPT_PROPERTY_OWNERSHIP_ISSUE_VW ( TAX_YEAR, STATE, COUNTY, MUNICIPALITY, PROPERTY_ID, PERCENTAGE_OWNED, DERIVED_OWNER_COUNT, PROPERTY_DESCRIPTION, PROPERTY_COUNTRY, PROPERTY_CITY, PROPERTY_LOCATION, BLOCK, LOT, CENSUS_TRACT, CENSUS_BLOCK, YEAR_CONSTRUCTED, DEED_BOOK, DEED_DATE, OWNER_NAME, OWNER_CITY, OWNER_STATE, OWNER_ADDRESS, OWNER_ZIPCODE, OWNER_COUNTRY ) AS
SELECT prop.TAX_YEAR
    , rm.STATE
    , rm.COUNTY
    , rm.MUNICIPALITY
    , prop.PROPERTY_ID
    , prop.PERCENTAGE_OWNED
    , prop.DERIVED_OWNER_COUNT
    , rpt.PROPERTY_DESCRIPTION
    , rpd.PROPERTY_COUNTRY
    , rpd.PROPERTY_CITY
    , rpd.PROPERTY_LOCATION
    , rpd.BLOCK
    , rpd.LOT
    , rpd.CENSUS_TRACT
    , rpd.CENSUS_BLOCK
    , rpd.YEAR_CONSTRUCTED
    , rpd.DEED_BOOK
    , rpd.DEED_DATE
    , rpd.OWNER_NAME
    , rpd.OWNER_CITY
    , rpd.OWNER_STATE
    , rpd.OWNER_ADDRESS
    , rpd.OWNER_ZIPCODE
    , rpd.OWNER_COUNTRY
    FROM (
        SELECT rp.TAX_YEAR
        , rp.PROPERTY_ID
        , SUM(rp.PERCENTAGE_OWNED) AS PERCENTAGE_OWNED
        , COUNT(*) AS DERIVED_OWNER_COUNT
        FROM RAS.RAS_PROPERTY rp
        GROUP BY rp.TAX_YEAR, rp.PROPERTY_ID
        HAVING SUM(rp.PERCENTAGE_OWNED) < 100
    ) prop
    JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_ID = prop.PROPERTY_ID)
    JOIN RAS.RAS_PROPERTY_TYPE rpt ON (rpt.PROPERTY_TYPE = rpd.PROPERTY_TYPE)
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rpd.STATE AND rm.CODE = rpd.MUNICIPALITY_CODE) 
;

CREATE OR REPLACE VIEW RAS.RPT_PROPERTY_OWNERSHIP_NOT_100_PCT_VW ( TAX_YEAR, STATE, COUNTY, MUNICIPALITY, PROPERTY_ID, PERCENTAGE_OWNED, PROPERTY_DESCRIPTION, PROPERTY_COUNTRY, PROPERTY_CITY, PROPERTY_LOCATION, BLOCK, LOT, CENSUS_TRACT, CENSUS_BLOCK, YEAR_CONSTRUCTED, DEED_BOOK, DEED_DATE, OWNER_NAME, OWNER_CITY, OWNER_STATE, OWNER_ADDRESS, OWNER_ZIPCODE, OWNER_COUNTRY ) AS
SELECT prop.TAX_YEAR
    , rm.STATE 
    , rm.COUNTY
    , rm.MUNICIPALITY
    , prop.PROPERTY_ID
    , prop.PERCENTAGE_OWNED
    , rpt.PROPERTY_DESCRIPTION
    , rpd.PROPERTY_COUNTRY
    , rpd.PROPERTY_CITY
    , rpd.PROPERTY_LOCATION
    , rpd.BLOCK
    , rpd.LOT
    , rpd.CENSUS_TRACT
    , rpd.CENSUS_BLOCK
    , rpd.YEAR_CONSTRUCTED
    , rpd.DEED_BOOK
    , rpd.DEED_DATE
    , rpd.OWNER_NAME
    , rpd.OWNER_CITY
    , rpd.OWNER_STATE
    , rpd.OWNER_ADDRESS
    , rpd.OWNER_ZIPCODE
    , rpd.OWNER_COUNTRY
    FROM (
        SELECT rp.TAX_YEAR
        , rp.PROPERTY_ID
        , SUM(rp.PERCENTAGE_OWNED) AS PERCENTAGE_OWNED
        FROM RAS.RAS_PROPERTY rp
        GROUP BY rp.TAX_YEAR, rp.PROPERTY_ID
        HAVING SUM(rp.PERCENTAGE_OWNED) != 100
    ) prop
    JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_ID = prop.PROPERTY_ID)
    JOIN RAS.RAS_PROPERTY_TYPE rpt ON (rpt.PROPERTY_TYPE = rpd.PROPERTY_TYPE)
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rpd.STATE AND rm.CODE = rpd.MUNICIPALITY_CODE) 
;

CREATE OR REPLACE VIEW RAS.RPT_PROPERTY_WITHOUT_LANDLORD_VW ( TAX_YEAR, STATE, COUNTY, MUNICIPALITY, PROPERTY_ID, PROPERTY_DESCRIPTION, PROPERTY_CITY, PROPERTY_LOCATION, NUMBER_OF_APARTMENTS, BLOCK, LOT, CENSUS_TRACT, CENSUS_BLOCK, DEED_BOOK, DEED_PAGE, DEED_DATE, OWNER_NAME, OWNER_CITY, OWNER_STATE, OWNER_ADDRESS, OWNER_ZIPCODE ) AS
SELECT prop.TAX_YEAR
    , rm.STATE 
    , rm.COUNTY
    , rm.MUNICIPALITY
    , prop.PROPERTY_ID
    , rpt.PROPERTY_DESCRIPTION
    , rpd.PROPERTY_CITY
    , rpd.PROPERTY_LOCATION
    , rpd.NUMBER_OF_APARTMENTS
    , rpd.BLOCK
    , rpd.LOT
    , rpd.CENSUS_TRACT
    , rpd.CENSUS_BLOCK
    , rpd.DEED_BOOK
    , rpd.DEED_PAGE
    , rpd.DEED_DATE
    , rpd.OWNER_NAME
    , rpd.OWNER_CITY
    , rpd.OWNER_STATE
    , rpd.OWNER_ADDRESS
    , rpd.OWNER_ZIPCODE
    FROM (
        SELECT rhu.TAX_YEAR
        , rhu.PROPERTY_ID
        FROM RAS.RAS_HOUSEHOLD_UNIT rhu
        LEFT JOIN RAS.RAS_PROPERTY rp ON (rp.TAX_YEAR = rhu.TAX_YEAR AND rp.PROPERTY_ID = rhu.PROPERTY_ID)
        WHERE rp.LANDLORD_TAX_ID IS NULL
    ) prop
    JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_ID = prop.PROPERTY_ID)
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rpd.STATE AND rm.CODE = rpd.MUNICIPALITY_CODE)
    JOIN RAS.RAS_PROPERTY_TYPE rpt ON (rpt.PROPERTY_TYPE = rpd.PROPERTY_TYPE) 
;

CREATE OR REPLACE VIEW RAS.RPT_RENTAL_INCOME_DIFFERENCE_VW ( TAX_YEAR, PROPERTY_ID, PERCENTAGE_OWNED, LANDLORD_COUNT, LL_RENTAL_INCOME, TENANT_PAYMENTS, PROPERTY_DESCRIPTION, STATE, COUNTY, MUNICIPALITY, PROPERTY_LOCATION, BLOCK, LOT, CENSUS_TRACT, CENSUS_BLOCK, DEED_BOOK, DEED_PAGE, DEED_DATE, NET_REPORTED_DIFFERENCE ) AS
SELECT ll.TAX_YEAR
    , ll.PROPERTY_ID
    , ll.PERCENTAGE_OWNED
    , ll.LANDLORD_COUNT
    , ll.LL_RENTAL_INCOME
    , tnt.TENANT_PAYMENTS
    , rpt.PROPERTY_DESCRIPTION
    , rm.STATE 
    , rm.COUNTY
    , rm.MUNICIPALITY
    , rpd.PROPERTY_LOCATION
    , rpd.BLOCK
    , rpd.LOT
    , rpd.CENSUS_TRACT
    , rpd.CENSUS_BLOCK
    , rpd.DEED_BOOK
    , rpd.DEED_PAGE
    , rpd.DEED_DATE
    , (ll.LL_RENTAL_INCOME - tnt.TENANT_PAYMENTS) AS NET_REPORTED_DIFFERENCE
    FROM (
        SELECT rp.TAX_YEAR
        , rp.PROPERTY_ID
        , SUM(rp.PERCENTAGE_OWNED) AS PERCENTAGE_OWNED
        , COUNT(*) AS LANDLORD_COUNT
        , SUM(rp.RENTAL_INCOME_RECEIVED) AS LL_RENTAL_INCOME
        FROM RAS.RAS_PROPERTY rp
        GROUP BY rp.TAX_YEAR, rp.PROPERTY_ID
    ) ll
    JOIN (
        SELECT rtph.TAX_YEAR
        , rtph.PROPERTY_ID
        , SUM(rtph.TOTAL_PAYMENTS) AS TENANT_PAYMENTS
        , COUNT(*) AS TENANT_COUNT
        FROM RAS.RAS_TENANT_PAYMENT_HISTORY rtph
        GROUP BY rtph.TAX_YEAR, rtph.PROPERTY_ID
    ) tnt ON (tnt.TAX_YEAR = ll.TAX_YEAR AND tnt.PROPERTY_ID = ll.PROPERTY_ID)
    JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_ID = ll.PROPERTY_ID)
    JOIN RAS.RAS_PROPERTY_TYPE rpt ON (rpt.PROPERTY_TYPE = rpd.PROPERTY_TYPE)
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rpd.STATE AND rm.CODE = rpd.MUNICIPALITY_CODE)
    WHERE ll.LL_RENTAL_INCOME != tnt.TENANT_PAYMENTS 
;

CREATE OR REPLACE VIEW RAS.RPT_RENTAL_PROPERTY_MISSING_LANDLORD ( TAX_YEAR, STATE, COUNTY, MUNICIPALITY, PROPERTY_ID, PROPERTY_DESCRIPTION, PROPERTY_COUNTRY, PROPERTY_CITY, PROPERTY_LOCATION, BLOCK, LOT, NUMBER_OF_APARTMENTS, CENSUS_TRACT, CENSUS_BLOCK, DEED_BOOK, DEED_PAGE, DEED_DATE, OWNER_NAME, OWNER_CITY, OWNER_STATE, OWNER_ADDRESS, OWNER_ZIPCODE, OWNER_COUNTRY ) AS
SELECT prop.TAX_YEAR
    , rm.STATE 
    , rm.COUNTY
    , rm.MUNICIPALITY
    , prop.PROPERTY_ID
    , rpt.PROPERTY_DESCRIPTION
    , rpd.PROPERTY_COUNTRY
    , rpd.PROPERTY_CITY
    , rpd.PROPERTY_LOCATION
    , rpd.BLOCK
    , rpd.LOT
    , rpd.NUMBER_OF_APARTMENTS
    , rpd.CENSUS_TRACT
    , rpd.CENSUS_BLOCK
    , rpd.DEED_BOOK
    , rpd.DEED_PAGE
    , rpd.DEED_DATE
    , rpd.OWNER_NAME
    , rpd.OWNER_CITY
    , rpd.OWNER_STATE
    , rpd.OWNER_ADDRESS
    , rpd.OWNER_ZIPCODE
    , rpd.OWNER_COUNTRY
    FROM (
        SELECT rhu.TAX_YEAR
        , rhu.PROPERTY_ID
        FROM RAS.RAS_HOUSEHOLD_UNIT rhu
        LEFT JOIN RAS.RAS_PROPERTY rp ON (rp.TAX_YEAR = rhu.TAX_YEAR AND rp.PROPERTY_ID = rhu.PROPERTY_ID)
        WHERE rp.LANDLORD_TAX_ID IS NULL
        GROUP BY rhu.TAX_YEAR, rhu.PROPERTY_ID
    ) prop
    JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_ID = prop.PROPERTY_ID)
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rpd.STATE AND rm.CODE = rpd.MUNICIPALITY_CODE)
    JOIN RAS.RAS_PROPERTY_TYPE rpt ON (rpt.PROPERTY_TYPE = rpd.PROPERTY_TYPE) 
;

CREATE OR REPLACE VIEW RAS.SUMMARIZE_LANDLORD_INFO_BY_CITY_VW ( PROPERTY_TAX_YEAR, PROPERTY_STATE, PROPERTY_COUNTY, PROPERTY_MUNICIPALITY, FIRST_NAME, MIDDLE_NAME, LAST_NAME, LANDLORD_TAX_ID, LANDLORD_ADDRESS, LANDLORD_CITY, LANDLORD_STATE, LANDLORD_ZIP_CODE, LANDLORD_COUNTRY, PROPERTY_COUNT, RENTAL_INCOME_RECEIVED, TOTAL_RENTAL_PAYMENTS, RENTAL_INCOME_DIFFERENCE, TOTAL_DEDUCTIONS, PROPERTY_TAXES ) AS
SELECT cityll.TAX_YEAR AS PROPERTY_TAX_YEAR
    , rm.STATE AS PROPERTY_STATE
    , rm.COUNTY AS PROPERTY_COUNTY
    , rm.MUNICIPALITY AS PROPERTY_MUNICIPALITY
    , llp.FIRST_NAME
    , llp.MIDDLE_NAME
    , llp.LAST_NAME
    , llp.LANDLORD_TAX_ID
    , llp.ADDRESS AS LANDLORD_ADDRESS
    , llp.CITY AS LANDLORD_CITY
    , llp.STATE AS LANDLORD_STATE
    , llp.ZIP_CODE AS LANDLORD_ZIP_CODE
    , llp.COUNTRY AS LANDLORD_COUNTRY
    , llp.PROPERTY_COUNT
    , llp.RENTAL_INCOME_RECEIVED
    , llp.TOTAL_RENTAL_PAYMENTS
    , llp.RENTAL_INCOME_DIFFERENCE
    , llp.TOTAL_DEDUCTIONS
    , llp.PROPERTY_TAXES
    FROM (
        SELECT rp.TAX_YEAR
        , rp.STATE
        , rp.MUNICIPALITY_CODE
        , rp.LANDLORD_TAX_ID
        FROM RAS.RAS_PROPERTY rp
        GROUP BY rp.TAX_YEAR, rp.STATE, rp.MUNICIPALITY_CODE, rp.LANDLORD_TAX_ID
    ) cityll
    JOIN RAS.LANDLORD_PROFILE_VW llp ON (llp.TAX_YEAR = cityll.TAX_YEAR AND llp.LANDLORD_TAX_ID = cityll.LANDLORD_TAX_ID)
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = cityll.STATE AND rm.CODE = cityll.MUNICIPALITY_CODE) 
;

CREATE OR REPLACE VIEW RAS.SUMMARIZE_RENTAL_PROPERTIES_BY_CITY ( STATE, COUNTY, MUNICIPALITY, TAX_YEAR, PROPERTY_COUNT, RENTAL_INCOME_RECEIVED, TOTAL_RENTAL_PAYMENTS, RENTAL_INCOME_DIFFERENCE, NUMBER_OF_PROPERTY_OWNERS, TOTAL_DEDUCTIONS, PROPERTY_TAXES ) AS
SELECT rpc.STATE
    , rpc.COUNTY
    , rpc.MUNICIPALITY
    , rpc.TAX_YEAR
    , rpc.PROPERTY_COUNT
    , rpc.RENTAL_INCOME_RECEIVED
    , tnt.TOTAL_RENTAL_PAYMENTS
    , rpc.RENTAL_INCOME_RECEIVED - tnt.TOTAL_RENTAL_PAYMENTS AS RENTAL_INCOME_DIFFERENCE
    , rpc.NUMBER_OF_PROPERTY_OWNERS
    , rpc.TOTAL_DEDUCTIONS
    , rpc.PROPERTY_TAXES
    FROM (
        SELECT rm.STATE
        , rm.COUNTY
        , rm.MUNICIPALITY
        , rp.TAX_YEAR
        , COUNT(*) AS PROPERTY_COUNT
        , SUM(rp.RENTAL_INCOME_RECEIVED) AS RENTAL_INCOME_RECEIVED
        , SUM(rp.NUMBER_OF_PROPERTY_OWNERS) AS NUMBER_OF_PROPERTY_OWNERS
        , SUM(rp.TOTAL_DEDUCTIONS) AS TOTAL_DEDUCTIONS
        , SUM(rp.PROPERTY_TAXES) AS PROPERTY_TAXES
        FROM RAS.RAS_PROPERTY rp
        JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rp.STATE AND rm.CODE = rp.MUNICIPALITY_CODE)
        GROUP BY rm.STATE, rm.COUNTY, rm.MUNICIPALITY, rp.TAX_YEAR
    ) rpc
    JOIN (
        SELECT pwtv.STATE
        , pwtv.COUNTY
        , pwtv.MUNICIPALITY
        , pwtv.TAX_YEAR
        , count(*) AS HOUSEHOLD_COUNT
        , SUM(pwtv.GROSS_INCOME) AS GROSS_INCOME
        , SUM(pwtv.TOTAL_RENTAL_PAYMENTS) AS TOTAL_RENTAL_PAYMENTS
        FROM RAS.PROPERTIES_WITH_TENANTS_VW pwtv
        GROUP BY pwtv.STATE, pwtv.COUNTY, pwtv.MUNICIPALITY, pwtv.TAX_YEAR
    ) tnt ON (tnt.STATE = rpc.STATE AND tnt.COUNTY = rpc.COUNTY AND tnt.MUNICIPALITY = rpc.MUNICIPALITY AND tnt.TAX_YEAR = rpc.TAX_YEAR) 
;

CREATE OR REPLACE VIEW RAS.SUMMARIZE_TENANTS_BY_CITY ( STATE, COUNTY, MUNICIPALITY, TAX_YEAR, HOUSEHOLD_COUNT, GROSS_INCOME, TOTAL_RENTAL_PAYMENTS, RENTAL_INCOME_RECEIVED, RENTAL_INCOME_DIFFERENCE ) AS
SELECT tnt.STATE
    , tnt.COUNTY
    , tnt.MUNICIPALITY
    , tnt.TAX_YEAR
    , tnt.HOUSEHOLD_COUNT
    , tnt.GROSS_INCOME
    , tnt.TOTAL_RENTAL_PAYMENTS
    , rp.RENTAL_INCOME_RECEIVED
    , (rp.RENTAL_INCOME_RECEIVED - tnt.TOTAL_RENTAL_PAYMENTS) AS RENTAL_INCOME_DIFFERENCE
    FROM (
        SELECT pwtv.STATE
        , pwtv.COUNTY
        , pwtv.MUNICIPALITY
        , pwtv.TAX_YEAR
        , count(*) AS HOUSEHOLD_COUNT
        , SUM(pwtv.GROSS_INCOME) AS GROSS_INCOME
        , SUM(pwtv.TOTAL_RENTAL_PAYMENTS) AS TOTAL_RENTAL_PAYMENTS
        FROM RAS.PROPERTIES_WITH_TENANTS_VW pwtv
        GROUP BY pwtv.STATE, pwtv.COUNTY, pwtv.MUNICIPALITY, pwtv.TAX_YEAR
    ) tnt
    JOIN (
        SELECT srpbc.STATE 
        , srpbc.COUNTY
        , srpbc.MUNICIPALITY
        , srpbc.TAX_YEAR
        , srpbc.RENTAL_INCOME_RECEIVED
        , srpbc.TOTAL_DEDUCTIONS
        , srpbc.PROPERTY_TAXES
        , srpbc.PROPERTY_COUNT
        FROM RAS.SUMMARIZE_RENTAL_PROPERTIES_BY_CITY srpbc
    ) rp ON (rp.STATE = tnt.STATE AND rp.COUNTY = tnt.COUNTY AND rp.MUNICIPALITY = tnt.MUNICIPALITY AND rp.TAX_YEAR = tnt.TAX_YEAR) 
;

CREATE OR REPLACE VIEW RAS.SUMMARIZE_LANDLORDS_BY_CITY_VW ( STATE, COUNTY, MUNICIPALITY, TAX_YEAR, PROPERTY_COUNT, RENTAL_INCOME_RECEIVED, HOUSEHOLD_COUNT, TOTAL_RENTAL_PAYMENTS, RENTAL_INCOME_DIFFERENCE, NUMBER_OF_PROPERTY_OWNERS, TOTAL_DEDUCTIONS, PROPERTY_TAXES ) AS
SELECT ll.STATE 
    , ll.COUNTY
    , ll.MUNICIPALITY
    , ll.TAX_YEAR
    , ll.PROPERTY_COUNT
    , ll.RENTAL_INCOME_RECEIVED AS RENTAL_INCOME_RECEIVED
    , tnt.HOUSEHOLD_COUNT AS HOUSEHOLD_COUNT
    , tnt.TOTAL_RENTAL_PAYMENTS AS TOTAL_RENTAL_PAYMENTS
    , ll.RENTAL_INCOME_RECEIVED - tnt.TOTAL_RENTAL_PAYMENTS AS "RENTAL_INCOME_DIFFERENCE"
    , ll.NUMBER_OF_PROPERTY_OWNERS
    , ll.TOTAL_DEDUCTIONS
    , ll.PROPERTY_TAXES
    FROM (
        SELECT srpbc.STATE 
        , srpbc.COUNTY
        , srpbc.TAX_YEAR
        , srpbc.MUNICIPALITY
        , SUM(srpbc.PROPERTY_COUNT) AS PROPERTY_COUNT
        , SUM(srpbc.RENTAL_INCOME_RECEIVED) AS RENTAL_INCOME_RECEIVED
        , SUM(srpbc.NUMBER_OF_PROPERTY_OWNERS) AS NUMBER_OF_PROPERTY_OWNERS
        , SUM(srpbc.TOTAL_DEDUCTIONS) AS TOTAL_DEDUCTIONS
        , SUM(srpbc.PROPERTY_TAXES) AS PROPERTY_TAXES
        FROM RAS.SUMMARIZE_RENTAL_PROPERTIES_BY_CITY srpbc
        GROUP BY srpbc.STATE, srpbc.COUNTY, srpbc.MUNICIPALITY, srpbc.TAX_YEAR
    ) ll
    JOIN (
        SELECT stbc.STATE
        , stbc.COUNTY
        , stbc.MUNICIPALITY
        , stbc.TAX_YEAR
        , sum(stbc.HOUSEHOLD_COUNT) AS HOUSEHOLD_COUNT
        , sum(stbc.TOTAL_RENTAL_PAYMENTS) AS TOTAL_RENTAL_PAYMENTS
        FROM SUMMARIZE_TENANTS_BY_CITY stbc
        GROUP BY stbc.STATE, stbc.COUNTY, stbc.MUNICIPALITY, stbc.TAX_YEAR
    ) tnt ON (tnt.STATE = ll.STATE AND tnt.COUNTY = ll.COUNTY AND tnt.MUNICIPALITY = ll.MUNICIPALITY AND tnt.TAX_YEAR = ll.TAX_YEAR) 
;

CREATE OR REPLACE VIEW RAS.SUMMARIZE_RENTAL_PROPERTIES_BY_COUNTY ( STATE, COUNTY, TAX_YEAR, PROPERTY_COUNT, RENTAL_INCOME_RECEIVED, HOUSEHOLD_COUNT, TOTAL_RENTAL_PAYMENTS, RENTAL_INCOME_DIFFERENCE, NUMBER_OF_PROPERTY_OWNERS, TOTAL_DEDUCTIONS, PROPERTY_TAXES ) AS
SELECT ll.STATE 
    , ll.COUNTY
    , ll.TAX_YEAR
    , ll.PROPERTY_COUNT
    , ll.RENTAL_INCOME_RECEIVED AS RENTAL_INCOME_RECEIVED
    , tnt.HOUSEHOLD_COUNT AS HOUSEHOLD_COUNT
    , tnt.TOTAL_RENTAL_PAYMENTS AS TOTAL_RENTAL_PAYMENTS
    , ll.RENTAL_INCOME_RECEIVED - tnt.TOTAL_RENTAL_PAYMENTS AS "RENTAL_INCOME_DIFFERENCE"
    , ll.NUMBER_OF_PROPERTY_OWNERS
    , ll.TOTAL_DEDUCTIONS
    , ll.PROPERTY_TAXES
    FROM (
        SELECT srpbc.STATE 
        , srpbc.COUNTY
        , srpbc.TAX_YEAR
        , SUM(srpbc.PROPERTY_COUNT) AS PROPERTY_COUNT
        , SUM(srpbc.RENTAL_INCOME_RECEIVED) AS RENTAL_INCOME_RECEIVED
        , SUM(srpbc.NUMBER_OF_PROPERTY_OWNERS) AS NUMBER_OF_PROPERTY_OWNERS
        , SUM(srpbc.TOTAL_DEDUCTIONS) AS TOTAL_DEDUCTIONS
        , SUM(srpbc.PROPERTY_TAXES) AS PROPERTY_TAXES
        FROM RAS.SUMMARIZE_RENTAL_PROPERTIES_BY_CITY srpbc
        GROUP BY srpbc.STATE, srpbc.COUNTY, srpbc.TAX_YEAR
    ) ll
    JOIN (
        SELECT stbc.STATE
        , stbc.COUNTY
        , stbc.TAX_YEAR
        , sum(stbc.HOUSEHOLD_COUNT) AS HOUSEHOLD_COUNT
        , sum(stbc.TOTAL_RENTAL_PAYMENTS) AS TOTAL_RENTAL_PAYMENTS
        FROM SUMMARIZE_TENANTS_BY_CITY stbc
        GROUP BY stbc.STATE, stbc.COUNTY, stbc.TAX_YEAR
    ) tnt ON (tnt.STATE = ll.STATE AND tnt.COUNTY = ll.COUNTY AND tnt.TAX_YEAR = ll.TAX_YEAR) 
;

CREATE OR REPLACE VIEW RAS.SUMMARIZE_LANDLORDS_BY_COUNTY_VW ( STATE, COUNTY, TAX_YEAR, LANDLORD_COUNT, HOUSEHOLD_COUNT, RENTAL_INCOME_RECEIVED, TOTAL_RENTAL_PAYMENTS, RENTAL_INCOME_DIFFERENCE, TOTAL_DEDUCTIONS, PROPERTY_TAXES ) AS
SELECT srpbc.STATE
    , srpbc.COUNTY
    , srpbc.TAX_YEAR
    , srpbc.PROPERTY_COUNT AS LANDLORD_COUNT
    , srpbc.HOUSEHOLD_COUNT
    , srpbc.RENTAL_INCOME_RECEIVED
    , srpbc.TOTAL_RENTAL_PAYMENTS
    , srpbc.RENTAL_INCOME_DIFFERENCE
    , srpbc.TOTAL_DEDUCTIONS
    , srpbc.PROPERTY_TAXES
    FROM RAS.SUMMARIZE_RENTAL_PROPERTIES_BY_COUNTY srpbc 
;

CREATE OR REPLACE VIEW RAS.SUMMARIZE_LANDLORDS_BY_PROPERTY_VW ( STATE, COUNTY, MUNICIPALITY, TAX_YEAR, PROPERTY_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, LANDLORD_ADDRESS, LANDLORD_CITY, LANDLORD_STATE, LANDLORD_ZIPCODE, LANDLORD_COUNTRY, LANDLORD_TAX_ID, PERCENTAGE_OWNED, RENTAL_INCOME_RECEIVED, NUMBER_OF_PROPERTY_OWNERS, TOTAL_DEDUCTIONS, PROPERTY_TAXES ) AS
SELECT rm.STATE
    , rm.COUNTY
    , rm.MUNICIPALITY
    , rp.TAX_YEAR
    , rp.PROPERTY_ID
    , rl.FIRST_NAME
    , rl.MIDDLE_NAME
    , rl.LAST_NAME
    , rl.ADDRESS AS LANDLORD_ADDRESS
    , rl.CITY AS LANDLORD_CITY
    , rl.STATE AS LANDLORD_STATE
    , rl.ZIP_CODE AS LANDLORD_ZIPCODE
    , rl.COUNTRY AS LANDLORD_COUNTRY
    , rp.LANDLORD_TAX_ID
    , rp.PERCENTAGE_OWNED
    , rp.RENTAL_INCOME_RECEIVED
    , rp.NUMBER_OF_PROPERTY_OWNERS
    , rp.TOTAL_DEDUCTIONS
    , rp.PROPERTY_TAXES
    FROM RAS.RAS_PROPERTY_BASE_YEAR rpby
    JOIN RAS.RAS_PROPERTY rp ON (rp.TAX_YEAR = rpby.TAX_YEAR AND rp.PROPERTY_ID = rpby.PROPERTY_ID AND rp.STATE = rpby.STATE)
    JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rpby.STATE AND rm.CODE = rpby.CODE)
    JOIN RAS.RAS_LANDLORD rl ON (rl.TAX_YEAR = rp.TAX_YEAR AND rl.TAXID = rp.LANDLORD_TAX_ID) 
;

CREATE OR REPLACE VIEW RAS.SUMMARIZE_RENTAL_PROPERTIES_BY_STATE ( STATE, TAX_YEAR, PROPERTY_COUNT, RENTAL_INCOME_RECEIVED, TOTAL_RENTAL_PAYMENTS, RENTAL_INCOME_DIFFERENCE, NUMBER_OF_PROPERTY_OWNERS, TOTAL_DEDUCTIONS, PROPERTY_TAXES ) AS
SELECT st.STATE 
    , st.TAX_YEAR
    , st.PROPERTY_COUNT
    , st.RENTAL_INCOME_RECEIVED
    , st.TOTAL_RENTAL_PAYMENTS
    , st.RENTAL_INCOME_DIFFERENCE AS RENTAL_INCOME_DIFFERENCE
    , st.NUMBER_OF_PROPERTY_OWNERS
    , st.TOTAL_DEDUCTIONS
    , st.PROPERTY_TAXES
    FROM (
        SELECT srpbc.STATE 
        , srpbc.TAX_YEAR
        , SUM(srpbc.PROPERTY_COUNT) AS PROPERTY_COUNT
        , SUM(srpbc.RENTAL_INCOME_RECEIVED) AS RENTAL_INCOME_RECEIVED
        , SUM(srpbc.TOTAL_RENTAL_PAYMENTS) AS TOTAL_RENTAL_PAYMENTS
        , SUM(srpbc.RENTAL_INCOME_DIFFERENCE) AS RENTAL_INCOME_DIFFERENCE
        , SUM(srpbc.NUMBER_OF_PROPERTY_OWNERS) AS NUMBER_OF_PROPERTY_OWNERS
        , SUM(srpbc.TOTAL_DEDUCTIONS) AS TOTAL_DEDUCTIONS
        , SUM(srpbc.PROPERTY_TAXES) AS PROPERTY_TAXES
        FROM RAS.SUMMARIZE_RENTAL_PROPERTIES_BY_COUNTY srpbc
        GROUP BY srpbc.STATE, srpbc.TAX_YEAR
    ) st 
;

CREATE OR REPLACE VIEW RAS.SUMMARIZE_RENTAL_PROPERTY_VW ( TAX_YEAR, STATE, COUNTY, MUNICIPALITY, PROPERTY_ID, LANDLORD_COUNT, PERCENTAGE_OWNED, RENTAL_INCOME_RECEIVED, TOTAL_RENTAL_PAYMENTS, RENTAL_INCOME_DIFFERENCE, NUMBER_OF_PROPERTY_OWNERS, TOTAL_DEDUCTIONS, PROPERTY_TAXES ) AS
SELECT rp.TAX_YEAR
    , rp.STATE 
    , rp.COUNTY
    , rp.MUNICIPALITY
    , rp.PROPERTY_ID
    , rp.LANDLORD_COUNT
    , rp.PERCENTAGE_OWNED
    , rp.RENTAL_INCOME_RECEIVED
    , tnt.TOTAL_RENTAL_PAYMENTS
    , rp.RENTAL_INCOME_RECEIVED - tnt.TOTAL_RENTAL_PAYMENTS AS RENTAL_INCOME_DIFFERENCE
    , rp.NUMBER_OF_PROPERTY_OWNERS
    , rp.TOTAL_DEDUCTIONS
    , rp.PROPERTY_TAXES
    FROM (
        SELECT rpby.TAX_YEAR
        , rpby.STATE
        , rm.COUNTY
        , rm.MUNICIPALITY
        , rpby.PROPERTY_ID
        , COUNT(*) AS LANDLORD_COUNT
        , SUM(rp.PERCENTAGE_OWNED) AS PERCENTAGE_OWNED
        , SUM(rp.RENTAL_INCOME_RECEIVED) AS RENTAL_INCOME_RECEIVED
        , SUM(rp.NUMBER_OF_PROPERTY_OWNERS) AS NUMBER_OF_PROPERTY_OWNERS
        , sum(rp.TOTAL_DEDUCTIONS) AS TOTAL_DEDUCTIONS
        , sum(rp.PROPERTY_TAXES) AS PROPERTY_TAXES
        FROM RAS.RAS_PROPERTY_BASE_YEAR rpby
        JOIN RAS.RAS_PROPERTY rp ON (rp.TAX_YEAR = rpby.TAX_YEAR AND rp.STATE = rpby.STATE AND rp.MUNICIPALITY_CODE = rpby.CODE AND rp.PROPERTY_ID = rpby.PROPERTY_ID)
        JOIN RAS.RAS_MUNICIPALITY rm ON (rm.STATE = rp.STATE AND rm.CODE = rp.MUNICIPALITY_CODE)
        GROUP BY rpby.TAX_YEAR, rpby.STATE, rm.COUNTY, rm.MUNICIPALITY, rpby.PROPERTY_ID
    ) rp
    JOIN (
        SELECT rptt.STATE
        , rptt.TAX_YEAR
        , rptt.PROPERTY_ID
        , SUM(rptt.TOTAL_RENTAL_PAYMENTS) AS TOTAL_RENTAL_PAYMENTS
        FROM RAS.RAS_PROPERTY_TO_TENANT rptt
        GROUP BY rptt.STATE, rptt.TAX_YEAR, rptt.PROPERTY_ID
    ) tnt ON (tnt.TAX_YEAR = rp.TAX_YEAR AND tnt.PROPERTY_ID = rp.PROPERTY_ID) 
;

CREATE OR REPLACE VIEW RAS.SUMMARIZE_TENANTS_BY_STATE ( TAX_YEAR, STATE, HOUSEHOLD_COUNT, TOTAL_RENTAL_PAYMENTS, RENTAL_INCOME_RECEIVED, RENTAL_INCOME_DIFFERENCE ) AS
SELECT stbc.TAX_YEAR
    , stbc.STATE
    , SUM(stbc.HOUSEHOLD_COUNT) AS HOUSEHOLD_COUNT
    , SUM(stbc.TOTAL_RENTAL_PAYMENTS) AS TOTAL_RENTAL_PAYMENTS
    , SUM(stbc.RENTAL_INCOME_RECEIVED) AS RENTAL_INCOME_RECEIVED
    , SUM(stbc.RENTAL_INCOME_DIFFERENCE) AS RENTAL_INCOME_DIFFERENCE
    FROM RAS.SUMMARIZE_TENANTS_BY_CITY stbc
    GROUP BY stbc.STATE, stbc.TAX_YEAR 
;

CREATE OR REPLACE VIEW RAS.TENANT_PROFILE_VW ( TAX_YEAR, TENANT_TAX_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, GROSS_INCOME, PROPERTY_ID, PROPERTY_LOCATION, PROPERTY_CITY, PROPERTY_COUNTRY ) AS
SELECT rptt.TAX_YEAR
    , rptt.TENANT_TAX_ID
    , rif.FIRST_NAME
    , rif.MIDDLE_NAME
    , rif.LAST_NAME
    , rif.GROSS_INCOME
    , rptt.PROPERTY_ID
    , rpd.PROPERTY_LOCATION
    , rpd.PROPERTY_CITY
    , rpd.PROPERTY_COUNTRY
    FROM RAS.RAS_PROPERTY_TO_TENANT rptt
    JOIN RAS.RAS_INDIVIDUAL_FILER rif ON (rif.TAX_YEAR = rptt.TAX_YEAR AND rif.TAXID = rptt.TENANT_TAX_ID)
    JOIN RAS.RAS_PROPERTY_DESCRIPTION rpd ON (rpd.PROPERTY_ID = rptt.PROPERTY_ID) 
;

CREATE OR REPLACE TRIGGER RAS.RAS_LANDLORD_INS_BEFORE_TRG 
    AFTER INSERT ON RAS.RAS_LANDLORD 
    FOR EACH ROW 
BEGIN
    -- If the landlord does not exist in RAS_INDIVIDUAL_FILER, insert the landlord into RAS_INDIVIDUAL_FILER.
    MERGE
    INTO RAS.RAS_INDIVIDUAL_FILER target
    USING dual
    ON (target.TAX_YEAR = :NEW.TAX_YEAR
        AND target.OWNER_NAME_ORIGINAL = :NEW.OWNER_NAME_ORIGINAL 
        AND target.OWNER_ADDRESS_ORIGINAL = :NEW.ADDRESS 
        AND target.OWNER_CITY_ORIGINAL = :NEW.CITY
        )
    WHEN NOT MATCHED THEN
        INSERT (
                TAX_YEAR, TAXID, PROPERTY_ID
                , FIRST_NAME, MIDDLE_NAME, LAST_NAME
                , OWN_RENTAL_PROPERTY, IS_BUSINESS_TAXID, IS_TENANT, GROSS_INCOME
                , OWNER_NAME_ORIGINAL, OWNER_ADDRESS_ORIGINAL, OWNER_CITY_ORIGINAL
        )
        VALUES(:NEW.TAX_YEAR, :NEW.TAXID, 0
                , :NEW.FIRST_NAME, :NEW.MIDDLE_NAME, :NEW.LAST_NAME
                , 'N', :NEW.IS_BUSINESS_TAXID, 'N', 0
                , :NEW.OWNER_NAME_ORIGINAL, :NEW.ADDRESS, :NEW.CITY
        );
        
    -- Insert all of the landlord properties into RAS_RAS_PROPERTY
    /*******************************************************************************************************
    MERGE
    INTO RAS.RAS_PROPERTY target
    USING dual
    ON (target.TAX_YEAR = :NEW.TAX_YEAR
        AND target.LANDLORD_TAX_ID = :NEW.OWNER_NAME_ORIGINAL 
        )
    WHEN NOT MATCHED THEN
        INSERT (
            TAX_YEAR, LANDLORD_TAX_ID, PROPERTY_ID
            , PERCENTAGE_OWNED, RENTAL_INCOME_RECEIVED, NUMBER_OF_PROPERTY_OWNERS
            ,  TOTAL_DEDUCTIONS, PROPERTY_TAXES
        )
        SELECT :NEW.TAX_YEAR, :NEW.TAXID, PROPERTY_ID
        FROM RAS.PROPERTY_DESCRIPTION rpd
        LEFT OUTER JOIN RAS.RAS_PROPERTY rp ON (rpd.LOAD_TAX_YEAR = :NEW.TAX_YEAR AND rpd.OWNER_NAME = :NEW.OWNER_NAME_ORIGINAL
                AND rpd.OWNER_CITY = :NEW.CITY AND rpd.OWNER_ADDRESS = :NEW.ADDRESSS
                )
        WHERE rpd.OWNER_NAME, rpd.OWNER_ADDRESS, rpd.OWNER_CITY
    *******************************************************************************************************/
        
END; 
/

CREATE OR REPLACE TRIGGER RAS.RAS_MUNICIPALITY_INS_BEFORE_TRG 
    AFTER INSERT ON RAS.RAS_MUNICIPALITY 
    FOR EACH ROW 
BEGIN
    INSERT INTO RAS.RAS_STATE_COUNTY(
        STATE, COUNTY
    )
    VALUES(
        :new.STATE
        , :new.COUNTY
    );
END; 
/

CREATE OR REPLACE TRIGGER RAS.RAS_PROPERTY_DESCRIPTION_INS_AFTER_TRG 
    AFTER INSERT ON RAS.RAS_PROPERTY_DESCRIPTION 
    FOR EACH ROW 
BEGIN
  INSERT INTO RAS.RAS_PROPERTY_BASE_YEAR(
    TAX_YEAR, PROPERTY_ID, STATE, CODE
    )
    VALUES(
        :new.LOAD_TAX_YEAR
        , :new.PROPERTY_ID
        , :new.STATE
        , :new.MUNICIPALITY_CODE
    );
END; 
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            25
-- CREATE INDEX                            41
-- ALTER TABLE                             43
-- CREATE VIEW                             26
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         5
-- CREATE FUNCTION                          6
-- CREATE TRIGGER                           3
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              3
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          9
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              2
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
